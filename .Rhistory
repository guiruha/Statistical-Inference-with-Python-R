segments(conf_int_t[1,i], i, conf_int_t[2,i], col = color, lwd=2)
}
sapply(1:200, FUN = seg.int)
abline(v=mu, lwd=2)
plot(1, type = "n", xlim=c(-0.8, 0.8), ylim=c(0,200), xlab = "Valores", ylab = "Repeticiones", main = "")
seg.int <- function(i) {
color = "light blue";
if ((mu< conf_int_t[1, i] | mu> conf_int_t[2, i])){color = "red"}
segments(conf_int_t[1,i], i, conf_int_t[2,i], col = color, lwd=2)
}
sapply(1:200, FUN = seg.int)
install.packages("tinytex")
installr::installr::MikTex
install.packages("MikTex")
knitr::opts_chunk$set(echo = TRUE)
colesterol
long_sep_mue <- iris[flores_ele,]$Sepal.Length
flores_ele <- sample(1:150, 40, replace = TRUE)
long_sep_mue <- iris[flores_ele,]$Sepal.Length
?t.test
t.test(long_sep_mue, mu = 5.7, conf.level = 0.95)
t.test(long_sep_mue, mu = 5.7, conf.level = 0.95, alternative = "greater")
test_t <- t.test(long_sep_mue, mu = 5.7, conf.level = 0.95, alternative = "greater")
test_t$conf.int
test_t$p.value
binom.test(21, 25, p=0.8,alternative = "greater", conf.leve = 0.95)
birthwt
library(MASS)
birthwt
set.seed(1001)
madres_elegidas <- sample(1:189, replace = TRUE)
table(madres_elegidas$smoke)
table(muestra_madres$smoke)
madres_elegidas <- sample(1:189, replace = TRUE)
table(muestra_madres$smoke)
muestra_madres <- birthwt(madres_elegidas)
muestra_madres <- birthwt[madres_elegidas,]
table(muestra_madres$smoke)
madres_elegidas <- sample(1:189,40, replace = TRUE)
muestra_madres <- birthwt[madres_elegidas,]
table(muestra_madres$smoke)
x <- table(muestra_madres$smoke)
x <- table(muestra_madres$smoke)[2]
binom.test(x,length(madres_elegidas), p=0.3, alternative = "greate")
binom.test(x,length(madres_elegidas), p=0.3, alternative = "greater")
knitr::opts_chunk$set(echo = TRUE)
Per = c(521, 742, 593, 635, 788, 717, 606, 639, 666, 624)
std(Per)
st(Per)
sd(Per)
Chi2 <- (n -1)*sd(Per) / varz
n  <- 10
varz <- 6400
alpha <- 0.05
Chi2 <- (n -1)*sd(Per) / varz
Chi2
Chi2 <- (n -1)*var(Per) / varz
Chi2
var(Per)
Chi2 <- (n -1)*var(Per) / varz
Chi2
pchisq(c(1-alpha/2, alpha/2), Chi2)
pchisq(c(1-alpha/2, alpha/2), Chi2, df = 9)
pchisq(c(1-alpha/2, alpha/2), Per, df = 9)
pchisq(c(1-alpha/2, alpha/2), Chi2, df = 9)
qchisq(c(1-alpha/2, alpha/2), Chi2, df = 9)
install.packages(TeachingDemos)
install.packages("TeachingDemos")
library(TeachingDemos)
sigma.test(x = Per, sigma = 80, conf.level = 0.95, alternative = "two.sided")
set.seed(2020)
flores_elegidas <- sample(1:150, 40, replace = TRUE)
muestra_flores = iris[flores_elegidas,]
library(TeachingDemos)
sigma.test(muestra_flores$Sepal.Width, sigma = 0.2, alternative = "less")
sigma.test(muestra_flores$Sepal.Width, sigmasq = 0.2, alternative = "less")
set.seed(45)
flores_elegidas_setosa = sample(1:50, 40, replace = TRUE)
flores_elegidas_versicolor = sample(51:100, 40, replace = TRUE)
muestra_setosa = iris[flores_elegidas_setosa]
muestra_versicolor = iris[flores_elegidas_versicolor]
muestra_setosa = iris[flores_elegidas_setosa,]
muestra_versicolor = iris[flores_elegidas_versicolor,]
t.test(muestra_setosa$Petal.Length, muestra_versicolor$Petal.Length, alternative = 'two.side')
t.test(muestra_setosa$Petal.Length, muestra_versicolor$Petal.Length, alternative = 'two.sided')
t.test(muestra_setosa$Petal.Length, muestra_versicolor$Petal.Length, alternative = 'two.side')
# Test con varianzas iguales
t.test(muestra_setosa$Petal.Length, muestra_versicolor$Petal.Length, alternative = 'two.side', var.equal = TRUE)
knitr::opts_chunk$set(echo = TRUE)
muestra_virginica = iris[flores_escogidas]
set.seed(100)
flores_escogidas = sample(101:150, 40, replace = TRUE)
muestra_virginica = iris[flores_escogidas]
muestra_virginica = iris[flores_escogidas,]
t.test(muestra_virginica$Petal.Length, muestra_virginica$Sepal.Length, paired = TRUE, alternative = "greater")
set.seed(110)
flores_escogidas = sample(101:150, 40, replace = TRUE)
muestra_virginica = iris[flores_escogidas,]
t.test(muestra_virginica$Petal.Length, muestra_virginica$Sepal.Length, paired = TRUE, alternative = "greater")
t.test(muestra_virginica$Sepal.Length, muestra_virginica$Petal.Length, paired = TRUE, alternative = "greater")
library(MASS)
library(MASS)
set.seed(333)
madres_elegidas = sample(1:189, 30, replace = TRUE)
muestras_madres = birthwt[madres_elegidas,]
matriz_prop = table(muestra_madres$smoke, muestra_madres$ht)
matriz_prop = table(muestras_madres$smoke, muestras_madres$ht)
(matriz_prop = table(muestras_madres$smoke, muestras_madres$ht))
matriz_prop = rbind(matriz_prop[2,], matriz_prop[1,])
matriz_prop = cbind(matriz_prop[,2], matriz_prop[,1])
(matriz_prop = table(muestras_madres$smoke, muestras_madres$ht))
matriz_prop = rbind(matriz_prop[2,], matriz_prop[1,])
matriz_prop = cbind(matriz_prop[,2], matriz_prop[,1])
matriz_prop
mcnemar.test(matriz_prop)
matriz_prop
(n = matriz_prop[1,2] + matriz_prop[2,1])
(éxitos = matriz_prop[2,1])
binom.test(éxitos, n , p = 0.5)
?mtcars
mtcars
binom.test(mtcars$am, p = 0.5, alternative = 'larger')
mtcars$am == 1
mtcars[mtcars$am == 1]
mtcars[mtcars$am == 1,]
length(mtcars[mtcars$am == 1,])
binom.test(x = length(mtcars[mtcars$am == 1,]), n = length(mtcars), p = 0.5, alternative = 'larger')
binom.test(x = length(mtcars[mtcars$am == 1,]), n = length(mtcars), p = 0.5, alternative = 'greater')
length(mtcars)
dim(mtcars)
dim(mtcars)[0]
?length
sum(mtcars[mtcars$am == 1,]$am)
binom.test(x = sum(mtcars[mtcars$am == 1,]$am), n = 32, p = 0.5, alternative = 'greater')
auto <- mtcars[mtcars$am == 1,]
man <- mtcars[mtcars$am == 0, ]
man
mean_auto <- mean(auto$mpg)
mean_man <- mean(man$mpg)
?t.test
t.test(mean_auto, mean_man)
t.test(auto$mpg, man$mpg, alternative = "two-side")
t.test(auto$mpg, man$mpg, alternative = "two-sided")
t.test(auto$mpg, man$mpg, alternative = "two.sided")
t.test(auto$mpg, man$mpg, alternative = "two.sided", paired = TRUE)
t.test(auto$mpg, man$mpg, alternative = "two.sided")
muestra_auto <- auto[sample(auto, 10, replace = TRUE)]
muestra_auto <- auto[sample(auto, 10, replace = TRUE),]
auto
muestra_auto <- auto[sample(auto, 8, replace = TRUE),]
muestra_auto <- auto[sample(auto, 10, replace = TRUE),]
dim(muestra_auot)
dim(auto)
manu <- man[sample(auto, 10, replace = TRUE)]
manu <- man[sample(10, replace = TRUE),]
autom <- auto[sample(10, replace = TRUE),]
manu
auto
total_muestra <- rbind(autom, manu)
knitr::opts_chunk$set(echo = TRUE)
?mtcars
matriz_fis <- table(total_muestra$am, total_muestra$vs)
matriz_fis
matriz_fis <- rbind(matriz_fis[2,], matriz_fis[1,])
fisher.test(matriz_fis)
total_muestra <- rbind(auto, man)
matriz_fis <- table(total_muestra$am, total_muestra$vs)
matriz_fis <- rbind(matriz_fis[2,], matriz_fis[1,])
fisher.test(matriz_fis)
library(TeachingDemos)
sigma.test(man$mpg, auto$mpg, alternative = "greater")
sigma.test(auto$mpg, man$mpg, alternative = "greater")
sigma.test(auto$mpg, man$mpg, sigma = var(auto$mpg), alternative = "greater")
var.test(auto$mpg, man$mpg)
var.test(man$mpg, auto$mpg)
fligner.test(list(auto$mpg, man$mpg))
dist = cars$dist
nspeed <- 4*speed-17
nspeed <- 4*cars$speed-17
t.test(mean(dist), mean(nspeed), paired = TRUE, alternative = "two.sided")
t.test(dist, nspeed, paired = TRUE, alternative = "two.sided")
t.test(nspeed, dist, paired = TRUE, alternative = "two.sided")
table(mtcars[mtcars$am == 1])
table(mtcars[mtcars$am == 1]$am)
table(mtcars$am)
am <- table(mtcars$am)[2]
eng <- table(mtcars$vs)[2]
eng
am
am <- table(mtcars$am)[1]
prop.test(c(am, eng), c(50, 50))
n_cau <- table(muestra_madcau$smoke)[2]
pt(q = 3.7, df = 19)
knitr::opts_chunk$set(echo = TRUE)
qqline(y = iris$Sepal.Width + 0.90/2, distribution = qnorm)
library(car)
library(car)
qqnorm(y = iris$Sepal.Width)
qqline(y = iris$Sepal.Width, distribution = qnorm)
qqline(y = iris$Sepal.Width + 0.90/2, distribution = qnorm)
qqline(y = iris$Sepal.Width + 0.50/2, distribution = qnorm)
qqnorm(y = iris$Sepal.Width)
qqline(y = iris$Sepal.Width, distribution = qnorm)
qqline(y = iris$Sepal.Width + 0.50/2, distribution = qnorm)
set.seed(2020)
muestra_flores <- sample(iris$Species, 10)
flores_escogidas <- iris[muestra_flores,]
chisq.test(table(flores_escogidas))
chisq.test(table(muestra_flores))
table(muestra_flores)
chisq.test(table(muestra_flores), simulate.p.value = TRUE, B = 2000)
extremos_izquierdos <- c(-Iinf, 1.95, 2.45, 3.45, 3.95, 4.45)
extremos_izquierdos <- c(-Inf, 1.95, 2.45, 3.45, 3.95, 4.45)
extremos_derechos <- c(1.95, 2.45, 2.95, 3.45, 3.95, 4.45, Inf)
frecuencais_empiricas <- c(2, 1,4, 15, 10, 5, 3)
n = sum(frecuencais_empiricas)
extremos_izquierdos <- c(-Inf, 1.95, 2.45, 3.45, 3.95, 4.45)
extremos_derechos <- c(1.95, 2.45, 2.95, 3.45, 3.95, 4.45, Inf)
frecuencias_empiricas <- c(2, 1,4, 15, 10, 5, 3)
n = sum(frecuencais_empiricas)
chisq.test(frecuencias_empiricas, p = probabilidades_teoricas)
mu = 3.5; sigma = 0.7;
probabilidades_teoricas <- pnorm(extremos_derechos, mu, sigma) - pnrom(extremos_izquierdos, mu, sigma)
mu = 3.5; sigma = 0.7;
probabilidades_teoricas <- pnorm(extremos_derechos, mu, sigma) - pnorm(extremos_izquierdos, mu, sigma)
chisq.test(frecuencias_empiricas, p = probabilidades_teoricas)
extremos_izquierdos <- c(-Inf, 1.95, 2.45, 2.95, 3.45, 3.95, 4.45)
extremos_derechos <- c(1.95, 2.45, 2.95, 3.45, 3.95, 4.45, Inf)
frecuencias_empiricas <- c(2, 1,4, 15, 10, 5, 3)
n = sum(frecuencais_empiricas)
mu = 3.5; sigma = 0.7;
probabilidades_teoricas <- pnorm(extremos_derechos, mu, sigma) - pnorm(extremos_izquierdos, mu, sigma)
chisq.test(frecuencias_empiricas, p = probabilidades_teoricas)
mu = 3.5; sigma = 0.7;
probabilidades_teoricas <- pnorm(extremos_derechos, mu, sigma) - pnorm(extremos_izquierdos, mu, sigma)
chisq.test(frecuencias_empiricas, p = probabilidades_teoricas)
chisq.test(frecuencias_empiricas, p = probabilidades_teoricas, simulate.p.value = TRUE, B = 2000)
estimacion_lambda <- (211+93*2+35*3+7*4+1*5)/(229+211+93+7+1)
frecuencias_empiricas <- c(229, 211, 93, 35, 8)
estimacion_lambda <- (211+93*2+35*3+7*4+1*5)/(229+211+93+7+1)
probabilidades_esperadas <- c(dpois(0, estimacion_lambda), dpois(1, estimacion_lambda), dpois(2, estimacion_lambda), dpois(3, estimacion_lambda), 1-ppois(3, estimacion_lambda))
chisq.test(frecuencias_empiricas, p=probabilidades_esperadas)
pchisq(test.chi2[[1]], loser.tail = FALSE)
pchisq(test.chi2[[1]], lower.tail = FALSE)
test.chi2 = chisq.test(frecuencias_empiricas, p = probabilidades_esperadas)
pchisq(test.chi2[[1]], lower.tail = FALSE)
pchisq(test.chi2[[1]],3, lower.tail = FALSE)
frecuencias_empiricas <- c(229, 211, 93, 35, 8)
estimacion_lambda <- (211+93*2+35*3+7*4+1*5)/(229+211+93+35+7+1)
probabilidades_esperadas <- c(dpois(0, estimacion_lambda), dpois(1, estimacion_lambda), dpois(2, estimacion_lambda), dpois(3, estimacion_lambda), 1-ppois(3, estimacion_lambda))
chisq.test(frecuencias_empiricas, p=probabilidades_esperadas)
frecuencias_empiricas <- c(229, 211, 93, 35, 8)
estimacion_lambda <- (211+93*2+35*3+7*4+1*5)/(229+211+93+35+7+1)
probabilidades_esperadas <- c(dpois(0, estimacion_lambda), dpois(1, estimacion_lambda), dpois(2, estimacion_lambda), dpois(3, estimacion_lambda), 1-ppois(3, estimacion_lambda))
chisq.test(frecuencias_empiricas, p=probabilidades_esperadas)
test.chi2 = chisq.test(frecuencias_empiricas, p = probabilidades_esperadas)
pchisq(test.chi2[[1]],3, lower.tail = FALSE)
pnom(1.9672)
pnorm(1.9672)
pnorm(1.9672) - pnorm(0.9836)
1-pchisq(16.1937)
1-pchisq(16.1937, 3)
pchisq(4.5646, 2)
1-pchisq(16.1937, 2)
pchisq(4.5646, 2, lower.tail = FALSE)
1 - pchisq(0.7895, 5)
pchisq(0.7895, 5)
pchisq(0.7895, 5, lower.tail = FALSE)
knitr::opts_chunk$set(echo = TRUE)
x = c(1.8, 1.8, 2.8, 5.9, 4.3, 4.7, 7.3, 8.7, 11.1)
df = data.frame(xi = x)
rownames(df) = 1:10
df = data.frame(i = 1:10, xi = x)
x = c(1.6, 1.8, 2.8, 5.9, 4.3, 4.7, 4.8, 7.3, 8.7, 11.1)
df = data.frame(i = 1:10, xi = x)
knitr::kable(df)
df = data.frame(i = 1:10, xi = x,
Fx = 1-e(-xi/5))
df = data.frame(i = 1:10, xi = x,
Fx = 1-exp(-xi/5))
df = data.frame(i = 1:10, xi = x,
Fx = 1-exp(-xi/5))
df = data.frame(i = 1:10, xi = x,
Fx = 1-exp(-x/5))
Fx = 1-exp(-x/5)
i = 1:10
df$FxM = max(df$Fx1, df$Fxw)
df$FxM = max(df$Fx1, df$Fx2)
df$FxM = pmax(df$Fx1, df$Fx2)
D = max(df$FxM)
D
D
D = max(df$FxM)
D
ks.test(x, "pexp", 1/5)
library(nortest)
install.packages("nortest")
library(nortest)
lillie.test(muestra)
lillie.test(x)
library(nortest)
lillie.test(x)
set.seed(100)
x = rt(50, 3)
lillie.test(x)
set.seed(100)
x = rt(50, 3)
ad.test(x)
set.seed(100)
x = rt(50, 3)
shapiro.test(x)
install.packages("fBasics")
set.seed(100)
x = rt(50, 3)
library(fBasics)
dagoTest(x)
knitr::opts_chunk$set(echo = TRUE)
muestra_coches <- mtcars$gear
chisq.test(table(muestra_flores))
lambda <- 3.7
muestra_esperada <- ppois(muestra_coches, lambda = lambda)
chisq.test(muestra_coches, muestra_esperada)
muestra_coches
table(muestra_coches)
ks.test(muestra_coches, "pois", 3.7)
ks.test(muestra_coches, "poiss", 3.7)
ks.test(muestra_coches, "ppois", 3.7)
knitr::opts_chunk$set(echo = TRUE)
tabla_contingencia <- table(cut(mtcars$am, 4), mtcars$gear)
tabla_contingencia
tabla_frec_esperadas <- rowSums(tabla_contingencia)%*%t(colSums(tabla_contingencia))/sum(tabla_contingencia)
tabla_frec_esperadas
tabla_contingencia <- table(mtcars$am, mtcars$gear)
tabla_contingencia
tabla_frec_esperadas <- rowSums(tabla_contingencia)%*%t(colSums(tabla_contingencia))/sum(tabla_contingencia)
tabla_frec_esperadas
tabla_contingencia <- table(mtcars$am, mtcars$vs)
tabla_contingencia
tabla_frec_esperadas <- rowSums(tabla_contingencia)%*%t(colSums(tabla_contingencia))/sum(tabla_contingencia)
tabla_frec_esperadas
chisq.test(tabla_contingencia)
library(ggplot2)
library(dplyr)
iris %>%
ggplot(aes(x = Species, y = Petal.Length, color = Species)) +
geom_boxplot()+
geom_point()+
theme_bw()+
theme(lenged.position = "none")
iris %>%
ggplot(aes(x = Species, y = Petal.Length, color = Species)) +
geom_boxplot()+
geom_point()+
theme_bw()+
theme(legend.position = "none")
iris %>%
ggplot(aes(x = Species, y = Petal.Length, color = Species)) +
geom_boxplot()+
geom_point()+
theme(legend.position = "none")
aggregate(Petal.Length ~ Species, data = iris, FUN = var)
iris2 z- filter(.data = iris, Species %in% c("versicolor", "virginica"))
iris2 <- filter(.data = iris, Species %in% c("versicolor", "virginica"))
var.test(x = iris[iris$Species == "versicolor",]$Petal.Length, y = iris[iris$Species == "virginica",]$Petal.Length)
library(car)
library(CARS)
library(lawstat)
install.packages("lawstat")
library(lawstat)
?levene.test
levene.test(Petal.Length ~ Species, datas = iris, c = "median")
levene.test(iris$Petal.Length, iris$Species, c = "median")
levene.test(iris$Petal.Length, iris$Species, c = "median", correction.method = "correction.factor")
levene.test(iris$Petal.Length, iris$Species, location = "median", correction.method = "correction.factor")
levene.test(iris$Petal.Length, iris$Species, location = "median")
levene.test(iris2$Petal.Length, iris2$Species, location = "median")
bartlett.test(Petal.Length ~ Species, data = iris)
bartlett.test(Petal.Length ~ Species, data = iris2)
install.packages("HH", dep = TRUE)
fligner.test(Petal.Length ~ Species, data = iris)
levene.test(iris$Petal.Length, iris$Species, location = "median")
levene.test(iris2$Petal.Length, iris2$Species, location = "median")
levene.test(iris$Petal.Length, iris$Species, location = "median")
levene.test(iris$Petal.Length, iris$Species, location = "median")
install.packages("agricolae")
pf(13.92, 3, 12, lower.tail = FALSE)
pt(-0.632187, 16)
pt(0.632187, 16)
pt(0.1866, 16)
pt(0.81284, 16)
pt(0.81284, 5)
pt(0.81284, 15)
knitr::opts_chunk$set(echo = TRUE)
GSI = c(0.90,0.83,1.06,0.67,0.98,0.57,1.29,0.47,1.12,0.66,
1.30,1.01,2.88,1.52,2.42,1.02,2.66,1.32,2.94,1.63)
temperatura = factor(rep(c(27,16),each=10))
fotoperiodos = factor(rep(c(9,14),times=10))
tabla.datos.GSI = data.frame(GSI,temperatura,fotoperiodos)
head(tabla.datos.GSI)
suma_combinacion_niveles = aggregate(GSI ~ temmperatura + fotoperiodos, data = tabla.datos.GSI)
suma_combinacion_niveles = aggregate(GSI ~ temmperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "mean")
suma_combinancion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
media_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "mean")
media_combinacion_niveles
(media_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "sum"))
(suma_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "sum"))
(media_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "sum"))
(suma_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "sum"))
(media_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "media"))
(suma_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "sum"))
(media_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "media"))
(media_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "mean"))
(media_temperatue = aggregate(GSI ~ temperatura, data = tabla.datos.GSI, FUN = "mean"))
(suma_total = sum(tabla.datos.GSI))
(suma_total = sum(tabla.datos.GSI))
(media_muestral = mean(tabla.datos.GSI))
(suma_total = sum(tabla.datos.GSI$GSI))
(media_muestral = mean(tabla.datos.GSI$GSI))
(suma_cuadrados = sum(tabla.datos.GSI$GSI^2))
(SST = suma_cuadrados - suma_total^2/(a*b*n))
a <- 2; b <- 2; n <- 5
(SST = suma_cuadrados - suma_total^2/(a*b*n))
(SSA = (1 / (b*n)*sum(suma_fotoperiodos[,2]^2)- suma_total^2/(a*b*n)))
(suma_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "sum"))
a <- 2; b <- 2; n <- 5
(SST = suma_cuadrados - suma_total^2/(a*b*n))
(SSA = (1 / (b*n)*sum(suma_fotoperiodos[,2]^2)- suma_total^2/(a*b*n)))
(SSB = (1/(a*n))*sum(suma.temperatura[,2]^2)-suma.total^2/(a*b*n))
a <- 2; b <- 2; n <- 5
(SST = suma_cuadrados - suma_total^2/(a*b*n))
(SSA = (1 / (b*n)*sum(suma_fotoperiodos[,2]^2)- suma_total^2/(a*b*n)))
(SSB = (1/(a*n))*sum(suma_temperatura[,2]^2)-suma_total^2/(a*b*n))
(media_temperatura = aggregate(GSI ~ temperatura, data = tabla.datos.GSI, FUN = "mean"))
(suma_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "sum"))
(media_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "mean"))
(suma_temperatura = aggregate(GSI ~ temperatura, data = tabla.datos.GSI, FUN = "sum"))
(media_temperatura = aggregate(GSI ~ temperatura, data = tabla.datos.GSI, FUN = "mean"))
(suma_total = sum(tabla.datos.GSI$GSI))
(media_muestral = mean(tabla.datos.GSI$GSI))
(suma_cuadrados = sum(tabla.datos.GSI$GSI^2))
a <- 2; b <- 2; n <- 5
(SST = suma_cuadrados - suma_total^2/(a*b*n))
(SSA = (1 / (b*n)*sum(suma_fotoperiodos[,2]^2)- suma_total^2/(a*b*n)))
(SSB = (1/(a*n))*sum(suma_temperatura[,2]^2)-suma_total^2/(a*b*n))
(SSTr = (1/n)*sum(suma_combinación.niveles[,3]^2)-suma_total^2/(a*b*n))
a <- 2; b <- 2; n <- 5
(SST = suma_cuadrados - suma_total^2/(a*b*n))
(SSA = (1 / (b*n)*sum(suma_fotoperiodos[,2]^2)- suma_total^2/(a*b*n)))
(SSB = (1/(a*n))*sum(suma_temperatura[,2]^2)-suma_total^2/(a*b*n))
(SSTr = (1/n)*sum(suma_combinación_niveles[,3]^2)-suma_total^2/(a*b*n))
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
a <- 2; b <- 2; n <- 5
(SST = suma_cuadrados - suma_total^2/(a*b*n))
(SSA = (1 / (b*n)*sum(suma_fotoperiodos[,2]^2)- suma_total^2/(a*b*n)))
(SSB = (1/(a*n))*sum(suma_temperatura[,2]^2)-suma_total^2/(a*b*n))
(SSTr = (1/n)*sum(suma_combinación_niveles[,3]^2)-suma_total^2/(a*b*n))
a <- 2; b <- 2; n <- 5
(SST = suma_cuadrados - suma_total^2/(a*b*n))
(SSA = (1 / (b*n)*sum(suma_fotoperiodos[,2]^2)- suma_total^2/(a*b*n)))
(SSB = (1/(a*n))*sum(suma_temperatura[,2]^2)-suma_total^2/(a*b*n))
(SSTr = (1/n)*sum(suma_combinacion_niveles[,3]^2)-suma_total^2/(a*b*n))
(SSAB = SSTr-SSA-SSB)
(SSE=SST-SSTr)
MSA <- SSA/(a - 1)
MSB <- SSB/(b -1 )
MSAB <- SSAB / ((a-1)*(b-1))
MSTr <- SSTr/(a*b-1)
MSE <- SSE/(a*b*(n-1))
summary(aov(X ~ A*B))
boxplot(GSI ~ fotoperiodos, data = tabla.datos.GSI, xlab = "Fotoperiodo", ylab = "GSI")
boxplot(GSI ~ fotoperiodos+temperatura, data = tabla.datos.GSI, xlab = "Combinación Fotoperiod y temperatura", ylab = "GSI")
boxplot(GSI ~ fotoperiodos+temperatura, data = tabla.datos.GSI, xlab = "Combinación fotoperiodo y temperatura", ylab = "GSI")
summary(aov(X ~ A*B))
summary(aov(GSI ~ fotoperiodos*temperatura, data = tabla.datos.GSI))
summary(aov(GSI ~ fotoperiodos:temperatura, data = tabla.datos.GSI))
interaction.plot(fotoperiodo, temperatura, GSI, xlab = "fotoperiodo", ylab = "GSI")
interaction.plot(fotoperiodos, temperatura, GSI, xlab = "fotoperiodo", ylab = "GSI")
interaction.plot(temperatura, fotoperiodos, GSI, xlab = "fotoperiodo", ylab = "GSI")
interaction.plot(temperatura, fotoperiodos, GSI, xlab = "temperatura", ylab = "GSI")
GSI <- tabla.datos.GSI$GSi
fotorperiodos <- tabla.datos.GSI$fotoperiodos
temperatura <- tabla.datos.GSI$temperatura
interaction.plot(fotoperiodos, temperatura, GSI, xlab = "fotoperiodo", ylab = "GSI")
interaction.plot(fotoperiodos, temperatura, GSI, xlab = "fotoperiodo", ylab = "GSI")
interaction.plot(temperatura, fotoperiodos, GSI, xlab = "temperatura", ylab = "GSI")
GSI <- tabla.datos.GSI$GSI
fotorperiodos <- tabla.datos.GSI$fotoperiodos
temperatura <- tabla.datos.GSI$temperatura
interaction.plot(fotoperiodos, temperatura, GSI, xlab = "fotoperiodo", ylab = "GSI")
interaction.plot(temperatura, fotoperiodos, GSI, xlab = "temperatura", ylab = "GSI")
