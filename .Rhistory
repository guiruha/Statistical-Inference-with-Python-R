}
n <- dim(tabla_arrestados)[1]
matriz_dist_hamming <- matrix(1, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
aux <- as(tabla_arrestados[i,],tabla_arrestados[j,])
matriz_dist_hamming[i, j]<-(aux[1]+aux[2])/sum(aux)
matriz_dist_hamming[j, i]<-matriz_dist_hamming[i, j]
}
}
tabla_arrestados
knitr::opts_chunk$set(echo = TRUE)
(resultado_km <- kmeans(trees, centers = 3, algorithm = "MacQueen"))
which(resultado_km$cluster==1)
which(resultado_km$cluster == 2)
resultado_km$centers
resultado_km$withinss
sum(resultado_km$withinss) == resultado_km$tot.withinss
resultado_km$tot.withinss
resultado_km$totss
resultado_km$betweenss
resultado_km$betweenss/resultado_km$totss
iter <- 50
SSCs <- c()
for (i in 1:iter){
SSCs <- c(SSCs, kmeans(trees, 3, algorithm = "MacQueen")$tot.withins)
}
min(SSCs)
library(car)
set.seed(2020)
individuos_elegidos <- sample(1:5226, 25)
tabla_arrestados <- Arrests[individuos_elegidos, c("colour", "sex", "employed", "citizen")]
rownames(tabla_arrestados)<- 1:25
head(tabla_arrestados, 10)
tabla_arrestados
tabla_arrestados$colour <- ifelse(tabla_arrestados$colour=="white", 0, 1)
tabla_arrestados$sex <- ifelse(tabla_arrestados$sex=="Male",0, 1)
tabla_arrestados$employed <- ifelse(tabla_arrestados$employed == "No", 0, 1)
tabla_arrestados$citizen <- ifelse(tabla_arrestados$citizen=="No", 0, 1)
tabla_arrestados
as <- function(xi, xj){
n <- length(xi)
a0 <- length(which(xi==xj & xi == 0))
a1 <- length(which(xi == xj & xi == 1))
a2 <- length(which(xi != xj))
return(c(a0, a1, a2))
}
n <- dim(tabla_arrestados)[1]
matriz_dist_hamming <- matrix(1, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
aux <- as(tabla_arrestados[i,],tabla_arrestados[j,])
matriz_dist_hamming[i, j]<-(aux[1]+aux[2])/sum(aux)
matriz_dist_hamming[j, i]<-matriz_dist_hamming[i, j]
}
}
matriz_dist_hamming
rownames(tabla_iris) <- 1:10
set.seed(2020)
flores_elegidas <- sample(1:150, 10)
tabla_iris <- iris[flores_elegidas,]
rownames(tabla_iris) <- 1:10
n <- dim(tabla_iris)[1]
matriz_dist_iris <- matrix(0, n, n)
for (i in 1:(n-1)){
[  for (j in (i+1):n){
n <- dim(tabla_iris)[1]
matriz_dist_iris <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
matriz_dist_iris[i,j] <- dist_euclidea(tabla_iris[i, 1:4], tabla_iris[j, 1:4])
matriz_dist_iris[j,i]<-matriz_dist_iris[j;i]
n <- dim(tabla_iris)[1]
matriz_dist_iris <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
matriz_dist_iris[i,j] <- dist_euclidea(tabla_iris[i, 1:4], tabla_iris[j, 1:4])
matriz_dist_iris[j,i]<-matriz_dist_iris[j,i]
}
}
set.seed(2020)
flores_elegidas <- sample(1:150, 10)
tabla_iris <- iris[flores_elegidas,]
rownames(tabla_iris) <- 1:10
dist_euclidea <- function(x, y){
n <-length(x)
d <- sqrt(sum((x-y)**2))
return(d)
}
n <- dim(tabla_iris)[1]
matriz_dist_iris <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
matriz_dist_iris[i,j] <- dist_euclidea(tabla_iris[i, 1:4], tabla_iris[j, 1:4])
matriz_dist_iris[j,i]<-matriz_dist_iris[j,i]
}
}
round(matriz_dist_iris, 2)
n <- dim(tabla_iris)[1]
matriz_dist_iris <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
matriz_dist_iris[i,j] <- dist_euclidea(tabla_iris[i, 1:4], tabla_iris[j, 1:4])
matriz_dist_iris[j,i]<-matriz_dist_iris[j,i]
}
}
round(matriz_dist_iris, 2)
n <- dim(tabla_iris)[1]
matriz_dist_iris <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
matriz_dist_iris[i,j] <- dist_euclidea(tabla_iris[i, 1:4], tabla_iris[j, 1:4])
matriz_dist_iris[j,i]<-matriz_dist_iris[i,j]
}
}
round(matriz_dist_iris, 2)
d <- sqrt(sum(abs(x-y)))
```{r}
dist_euclidea <- function(x, y){
n <-length(x)
d <- sqrt(sum(abs(x-y)))
return(d)
}
dist_manhatan <- function(x, y){
n <-length(x)
d <- sqrt(sum(abs(x-y)))
return(d)
}
n <- dim(tabla_iris)[1]
matriz_dist_iris <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
matriz_dist_iris[i,j] <- dist_manhatan(tabla_iris[i, 1:4], tabla_iris[j, 1:4])
matriz_dist_iris[j,i]<-matriz_dist_iris[i,j]
}
}
round(matriz_dist_iris, 2)
dist_euclidea <- function(x, y){
n <-length(x)
d <- sqrt(sum((x-y)**2))
return(d)
}
dist(dist(tabla_iris[, 1:4]), 2)
round(dist(tabla_iris[, 1:4]), 2)
round(as.matrix(dist(tabla_iris[, 1:4])),2)
dist(tabla_arrestados)
round(dist(as.matrix(tabla_arrestados)), 2)
apply(tabla_irirs[,1:4], 2, sd)
apply(tabla_iris[,1:4], 2, sd)
apply(tabla_iris[,1:4], 2, sd)
tabla_iris - apply(tabla_iris[,1:4], 2, sd)
tabla_iris[, 1:4] - apply(tabla_iris[,1:4], 2, sd)
tabla_iris[, 1:4] / apply(tabla_iris[,1:4], 2, sd)
apply(tabla_iris[,1:4], 2, sd)
tabla_iris_escalda <- scale(tabla_iris[, 1:4])
tabla_iris_escalda
tabla_iris_escalada <- scale(tabla_iris[, 1:4])
tabla_iris_escalada
apply(tabla_iris_escalada, 2, sd)
(apply(tabla_iris_escalada, 2, mean))
(apply(tabla_iris_escalada, 2, mean))
apply(tabla_iris_escalada, 2, sd)
matriz_nueva <-matriz_dist_iris
diag(matriz_nueva)<-max(matriz_dist_iris)
(flores_min <- which(matriz_nueva == min(matriz_nueva), arr.ind = TRUE))
matriz_dist_iris[, 2:4]
matriz_dist_iris[2:4,]
sum(matriz_dist_iris[4] - matriz_dist_iris[2])
hclust(matriz_dist_hamming, method = "single")
hclust(dist_euclidea(), method = "single")
hclust(dist_euclidea(tabla_iris), method = "single")
clustering_jer <- hclust(dist(tabla_iris[,1:4]), method = "single")
clustering_jer$merge
clustering_jer$height
plot(clustering_jer)
plot(clustering_jer, hang = -1, xlab = "muestra de flores tabla datos iris", sub = "", ylab = "distancia euclÃ­dea")
cutree(clustering_jer, k = 3)
cutree(clustering_jer, h = 1.5)
plot(clustering_jer)
rect.hclust(clustering_jer, h = 1.5)
plot(clustering_jer, hang = -1)
plot(clustering_jer, hang = -1, xlab = "muestra de flores tabla de datos iris", ylab = "distancia", labels = 1:10)
rect.hclust(clustering_jer, h = 1.5)
plot(clustering_jer, hang = -1, xlab = "muestra de flores tabla de datos iris", ylab = "distancia", labels = 1:10)
rect.hclust(clustering_jer, h = 1.5)
plot(clustering_jer, hang = -1, xlab = "muestra de flores tabla de datos iris", ylab = "distancia", sub = "",labels = 1:10)
rect.hclust(clustering_jer, h = 1.5)
plot(clustering_jer, hang = -1, xlab = "muestra de flores tabla de datos iris", ylab = "distancia", sub = "",labels = 1:10)
rect.hclust(clustering_jer, h = 1.5)
plot(clustering_jer, hang = -1, xlab = "muestra de flores tabla de datos iris", ylab = "distancia euclidea", sub = "",labels = 1:10)
rect.hclust(clustering_jer, h = 1.5)
clustering_irir_completo <- hclust(dist(tabla_iris[, 1:4], methos = "complete"))
clustering_irir_completo <- hclust(dist(tabla_iris[, 1:4], methos = "complete"))
clustering_irir_completo <- hclust(dist(tabla_iris[, 1:4], method = "complete"))
clustering_irir_completo <- hclust(dist(tabla_iris[, 1:4], method = "complete"))
hclust?
dafa
?hclust
clustering_irir_completo <- hclust(dist(tabla_iris[,1:4]) method = "complete")
clustering_irir_completo <- hclust(dist(tabla_iris[,1:4]), method = "complete")
plot(clustering_irir_completo, hang = -1, xlab = "muestra de flores tabla de datos iris", sub="", ylab = "distancia euclidea", label = 1:10)
clustering_irir_completo <- hclust(dist(tabla_iris[,1:4]), method = "complete")
plot(clustering_irir_completo, hang = -1, xlab = "muestra de flores tabla de datos iris", sub="", ylab = "distancia euclidea", label = 1:10)
rect.hclust(clustering_irir_completo, h = 1.5)
clustering_irir_completo <- hclust(dist(tabla_iris[,1:4]), method = "complete")
plot(clustering_irir_completo, hang = -1, xlab = "muestra de flores tabla de datos iris", sub="", ylab = "distancia euclidea", label = 1:10)
rect.hclust(clustering_irir_completo, h = 2)
knitr::opts_chunk$set(echo = TRUE)
(resultado_km <- kmeans(trees, centers = 3, algorithm = "MacQueen"))
which(resultado_km$cluster==1)
which(resultado_km$cluster == 2)
resultado_km$centers
resultado_km$withinss
sum(resultado_km$withinss) == resultado_km$tot.withinss
resultado_km$tot.withinss
resultado_km$totss
resultado_km$betweenss
resultado_km$betweenss/resultado_km$totss
iter <- 50
SSCs <- c()
for (i in 1:iter){
SSCs <- c(SSCs, kmeans(trees, 3, algorithm = "MacQueen")$tot.withins)
}
min(SSCs)
library(car)
set.seed(2020)
individuos_elegidos <- sample(1:5226, 25)
tabla_arrestados <- Arrests[individuos_elegidos, c("colour", "sex", "employed", "citizen")]
rownames(tabla_arrestados)<- 1:25
head(tabla_arrestados, 10)
tabla_arrestados$colour <- ifelse(tabla_arrestados$colour=="white", 0, 1)
tabla_arrestados$sex <- ifelse(tabla_arrestados$sex=="Male",0, 1)
tabla_arrestados$employed <- ifelse(tabla_arrestados$employed == "No", 0, 1)
tabla_arrestados$citizen <- ifelse(tabla_arrestados$citizen=="No", 0, 1)
tabla_arrestados
as <- function(xi, xj){
n <- length(xi)
a0 <- length(which(xi==xj & xi == 0))
a1 <- length(which(xi == xj & xi == 1))
a2 <- length(which(xi != xj))
return(c(a0, a1, a2))
}
n <- dim(tabla_arrestados)[1]
matriz_dist_hamming <- matrix(1, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
aux <- as(tabla_arrestados[i,],tabla_arrestados[j,])
matriz_dist_hamming[i, j]<-(aux[1]+aux[2])/sum(aux)
matriz_dist_hamming[j, i]<-matriz_dist_hamming[i, j]
}
}
matriz_dist_hamming
set.seed(2020)
flores_elegidas <- sample(1:150, 10)
tabla_iris <- iris[flores_elegidas,]
rownames(tabla_iris) <- 1:10
dist_euclidea <- function(x, y){
n <-length(x)
d <- sqrt(sum((x-y)**2))
return(d)
}
n <- dim(tabla_iris)[1]
matriz_dist_iris <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
matriz_dist_iris[i,j] <- dist_euclidea(tabla_iris[i, 1:4], tabla_iris[j, 1:4])
matriz_dist_iris[j,i]<-matriz_dist_iris[i,j]
}
}
round(matriz_dist_iris, 2)
dist_manhatan <- function(x, y){
n <-length(x)
d <- sqrt(sum(abs(x-y)))
return(d)
}
n <- dim(tabla_iris)[1]
matriz_dist_iris <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
matriz_dist_iris[i,j] <- dist_manhatan(tabla_iris[i, 1:4], tabla_iris[j, 1:4])
matriz_dist_iris[j,i]<-matriz_dist_iris[i,j]
}
}
round(matriz_dist_iris, 2)
round(dist(tabla_iris[, 1:4]), 2)
round(as.matrix(dist(tabla_iris[, 1:4])),2)
round(dist(as.matrix(tabla_arrestados)), 2)
tabla_iris_escalada <- scale(tabla_iris[, 1:4])
tabla_iris_escalada
(apply(tabla_iris_escalada, 2, mean))
apply(tabla_iris_escalada, 2, sd)
matriz_nueva <-matriz_dist_iris
diag(matriz_nueva)<-max(matriz_dist_iris)
(flores_min <- which(matriz_nueva == min(matriz_nueva), arr.ind = TRUE))
sum(matriz_dist_iris[4] - matriz_dist_iris[2])
clustering_jer <- hclust(dist(tabla_iris[,1:4]), method = "single")
clustering_jer$merge
clustering_jer$height
plot(clustering_jer, hang = -1, xlab = "muestra de flores tabla datos iris", sub = "", ylab = "distancia euclÃ­dea")
cutree(clustering_jer, k = 3)
cutree(clustering_jer, h = 1.5)
plot(clustering_jer, hang = -1, xlab = "muestra de flores tabla de datos iris", ylab = "distancia euclidea", sub = "",labels = 1:10)
rect.hclust(clustering_jer, h = 1.5)
clustering_irir_completo <- hclust(dist(tabla_iris[,1:4]), method = "complete")
plot(clustering_irir_completo, hang = -1, xlab = "muestra de flores tabla de datos iris", sub="", ylab = "distancia euclidea", label = 1:10)
rect.hclust(clustering_irir_completo, h = 2)
View(matriz_dist_hamming)
clustering_arrestado <- hclust(as.dist(1-matriz_dist_hamming), method = "ward.D")
clustering_arrestado <- hclust(as.dist(1-matriz_dist_hamming), method = "ward.D")
plot(clustering_arrestado)
rect.hclust(clustering_arrestado, h = 2)
rect.hclust(clustering_arrestado, h = 0.5)
clustering_arrestado <- hclust(as.dist(1-matriz_dist_hamming), method = "ward.D")
plot(clustering_arrestado)
rect.hclust(clustering_arrestado, h = 0.5)
mtcars[, ['wt', 'qsec]]
kmeans(mtcars[, ('wt','qsec)])
mtcars[, ('wt','qsec)]
mtcars[, ('wt','qsec')]
mtcars[, 'wt':'qsec']
columns(mtcars)
colunames(mtcars)
colnames(mtcars)
colnames(mtcars[6:7])
kmeans(mtcars[6:7], centers = 4, algorithm = "Manhattan")
kmeans(mtcars[6:7], centers = 4, algorithm = "Lloyd")
kmeans(mtcars[6:7], centers = 4, algorithm = "Lloyd")$size
kmeans(mtcars[6:7], centers = 4, algorithm = "Lloyd", metric = "Manhattan")$size
kmeans(mtcars[6:7], centers = 4, algorithm = "Lloyd", trace = "Manhattan")$size
kmeans(mtcars[6:7], centers = 4, algorithm = "Lloyd", trace = "Manhattan")
prueba <-kmeans(mtcars[6:7], centers = 4, algorithm = "Lloyd", trace = "Manhattan")
prueba$tot.withinss
plot(prueba)
prueba$size
prueba
prueba <-kmeans(mtcars[5:7], centers = 4, algorithm = "Lloyd", trace = "Manhattan")
prueba
prueba <-kmeans(mtcars[6:8], centers = 4, algorithm = "Lloyd", trace = "Manhattan")
prueba
colnames(mtcats)
colnames(mtcars)
prueba <-kmeans(cbind(mtcars[, 6:7], mtcars[,4]), centers = 4, algorithm = "Lloyd", trace = "Manhattan")
prueba
prueba$tot.withinss
prueba$totss
prueba
prueba <-kmeans(cbind(mtcars[, 6:7], mtcars[4]), centers = 4, algorithm = "Lloyd", trace = "Manhattan")
colnames(mtcars)
prueba <-kmeans(cbind(mtcars[, 6:7], mtcars[4]), centers = 4, algorithm = "Lloyd", trace = "Manhattan")
prueba
prueba <-kmeans(cbind(mtcars[, 6:7], mtcars[4], mtcars[1]), centers = 4, algorithm = "Lloyd", trace = "Manhattan")
colnames(mtcars)
prueba <-kmeans(cbind(mtcars[, 6:7], mtcars[4], mtcars[1]), centers = 4, algorithm = "Lloyd", trace = "Manhattan")
prueba
prueba$tot.withinss
prueba$totss
summary(prueba)
prueba
prueba <-kmeans(cbind(mtcars[:, 1], mtcars[:, 4], mtcars[:, 6:7], mtcars[4], mtcars[1]), centers = 4, algorithm = "Lloyd", trace = "Manhattan")
mtcars[1]
mtcars[4]
[:, 6:7]
mtcars[:, 6:7]
mtcars[6:7]
prueba <-kmeans(cbind(mtcars[1], mtcars[4], mtcars[6:7]), centers = 4, algorithm = "Lloyd", trace = "Manhattan")
prueba
prueba$tot.withinss
prueba <- cbind(mtcars[1], mtcars[4], mtcars[6:7])
hclust(dist(prueba), method = "complete", metric = "eculidean")
prueba <- cbind(mtcars[1], mtcars[4], mtcars[6:7])
hclust(dist(prueba), method = "complete", metric = "eculidean")
prueba <- cbind(mtcars[1], mtcars[4], mtcars[6:7])
hclust(dist(prueba), method = "complete")
pure <- hclust(dist(prueba), method = "complete")
pure$order
pure$height
pure$labels
pure$call
pure
pure$merge
prueba[22:23,]
plot(pure)
rect.hclust(pure, h = 5)
prueba <- cbind(mtcars[1], mtcars[4], mtcars[6:7])
pure <- hclust(dist(prueba), method = "complete")
plot(pure)
rect.hclust(pure, h = 5)
prueba <- cbind(mtcars[1], mtcars[4], mtcars[6:7])
pure <- hclust(dist(prueba), method = "complete")
plot(pure)
rect.hclust(pure, k = 5)
prueba <- cbind(mtcars[1], mtcars[4], mtcars[6:7])
pure <- hclust(dist(scale(prueba)), method = "complete")
plot(pure)
rect.hclust(pure, k = 5)
kmeans(prueba, algorithm = "Lloyd", trace = "Manhattan")
kmeans(prueba, centers = 4, algorithm = "Lloyd", trace = "Manhattan")
prueba <- cbind(mtcars[1], mtcars[4], mtcars[6:7])
pure <- hclust(dist(scale(prueba)), method = "complete")
pure$merge
prueba[15:16,]
knitr::opts_chunk$set(echo = TRUE)
dist_con <- function(x, y){ifelse(x<0 | y>0, 0,
ifelse(x >= 0 & x <= 1 & y>= 0 & y<=1, x*y,
ifelse(x>= 0 & x<= 1 & y>1, x, ifelse(y>= 0 & y<=1 & x>1, y, 1))))}
x <- seq(-2, 2, 0.1)
y <- seq(-2, 2, 0.1)
z <- outer(x, y, f.dist.con)
dist_con <- function(x, y){ifelse(x<0 | y>0, 0,
ifelse(x >= 0 & x <= 1 & y>= 0 & y<=1, x*y,
ifelse(x>= 0 & x<= 1 & y>1, x, ifelse(y>= 0 & y<=1 & x>1, y, 1))))}
x <- seq(-2, 2, 0.1)
y <- seq(-2, 2, 0.1)
z <- outer(x, y, dist_con)
persp(x, y, z, theta = 50, phi = 40, col = "blue", shae = 0.25, ticktype = 'detailed')
dist_con <- function(x, y){ifelse(x<0 | y>0, 0,
ifelse(x >= 0 & x <= 1 & y>= 0 & y<=1, x*y,
ifelse(x>= 0 & x<= 1 & y>1, x, ifelse(y>= 0 & y<=1 & x>1, y, 1))))}
x <- seq(-2, 2, 0.1)
y <- seq(-2, 2, 0.1)
z <- outer(x, y, dist_con)
persp(x, y, z, theta = 50, phi = 40, col = "blue", shade = 0.25, ticktype = 'detailed')
```{r}
probadado <- function(x, n=6) sapply(x, FUN = function(x)
if (x %in% c(1:n)), {return(1/n)} else{return(0)})
probadado <- function(x, n=6) sapply(x, FUN = function(x)
if (x %in% c(1:n)), {return(1/n)} else {return(0)})
probadado = function(x, n=6) sapply(x, FUN = function(x)
if (x %in% c(1:n)), {return(1/n)} else {return(0)})
probadado <- function(x, n=6) sapply(x, FUN = function(x)
if (x %in% c(1:n)) {return(1/n)} else {return(0)})
pdado(4, 6)
pdado(4, 6)
probadado(4, 6)
probadado2 <- function(x, y, n = 6) {pdado(x, n)*pdadoo(y,n)}
pdado2(3, 4, 6)
probadado2(3, 4, 6)
psum_prod <- function(x, y, n=6){
Dxy <- data.frame(d1 = rep(1:n, each = n), d2 = rep(1:n, times = n))
Dxy$suma <- Dxy$d1*Dxy$d2
aux <- Dxy[Dxy$suma == x& Dxy$producto == y, ]
sum(apply(aux[, 1:2], FUN = function(x) {probadado2(x[1], x[2], n = n)}, 1))
}
psum_prod(6, 8)
probadado2 <- function(x, y, n = 6) {probadado(x, n)*pdadoo(y,n)}
probadado2(3, 4, 6)
probadado2 <- function(x, y, n = 6) {probadado(x, n)*probadado(y,n)}
probadado2(3, 4, 6)
psum_prod <- function(x, y, n=6){
Dxy <- data.frame(d1 = rep(1:n, each = n), d2 = rep(1:n, times = n))
Dxy$suma <- Dxy$d1*Dxy$d2
aux <- Dxy[Dxy$suma == x& Dxy$producto == y, ]
sum(apply(aux[, 1:2], FUN = function(x) {probadado2(x[1], x[2], n = n)}, 1))
}
Dxy$suma <- Dxy$d1*Dxy$d2
psum_prod <- function(x, y, n=6){
Dxy <- data.frame(d1 = rep(1:n, each = n), d2 = rep(1:n, times = n))
Dxy$suma <- Dxy$d1*Dxy$d2
aux <- Dxy[Dxy$suma == x& Dxy$producto == y, ]
sum(apply(aux[, 1:2], FUN = function(x) {probadado2(x[1], x[2], n = n)}, 1))
}
psum_prod(6, 8)
psum_prod <- function(x, y, n=6){
Dxy <- data.frame(d1 = rep(1:n, each = n), d2 = rep(1:n, times = n))
Dxy$suma <- Dxy$d1+Dxy$d2
aux <- Dxy[Dxy$suma == x& Dxy$producto == y, ]
sum(apply(aux[, 1:2], FUN = function(x) {probadado2(x[1], x[2], n = n)}, 1))
}
psum_prod(6, 8)
psum_prod <- function(x, y, n=6){
Dxy <- data.frame(d1 = rep(1:n, each = n), d2 = rep(1:n, times = n))
Dxy$suma <- Dxy$d1+Dxy$d2
Dxy$producto <- Dxy$d1*Dxy$d2
aux <- Dxy[Dxy$suma == x& Dxy$producto == y, ]
sum(apply(aux[, 1:2], FUN = function(x) {probadado2(x[1], x[2], n = n)}, 1))
}
psum_prod(6, 8)
den_con <- function(x,y){ielse(x>=0 & y>= 0 & x>=y,
2*exp(-x-y),0)}
dist_con <- function(x,y){ifelse(x>=0 & y>=0 & x<=y,
1-2*exp(-x) + exp(-2*x), ifelse(x>= 0 & y>= 0 & x>= y,
1-2*exp(-x)-exp(-2*y)+2*exp(-x-y),0))}
x <- seq(-1, 4, 0.1)
y <- seq(-1, 4, 0.1)
z_den_con <- outer(x,y,den_con)
den_con <- function(x,y){ifelse(x>=0 & y>= 0 & x>=y,
2*exp(-x-y),0)}
dist_con <- function(x,y){ifelse(x>=0 & y>=0 & x<=y,
1-2*exp(-x) + exp(-2*x), ifelse(x>= 0 & y>= 0 & x>= y,
1-2*exp(-x)-exp(-2*y)+2*exp(-x-y),0))}
x <- seq(-1, 4, 0.1)
y <- seq(-1, 4, 0.1)
z_den_con <- outer(x, y, den_con)
z_dist_con <- outer(x, y, dist_con)
persp(x, y, z,den_con, theta = 50, phi = 40, col = "red", shade = 0.25, ticktype="detailed")
x <- seq(-1, 4, 0.1)
y <- seq(-1, 4, 0.1)
z_den_con <- outer(x, y, den_con)
z_dist_con <- outer(x, y, dist_con)
persp(x, y, z,den_con, theta = 50, phi = 40, col = "red", shade = 0.25, ticktype="detailed")
x <- seq(-1, 4, 0.1)
y <- seq(-1, 4, 0.1)
z_den_con <- outer(x, y, den_con)
z_dist_con <- outer(x, y, dist_con)
persp(x, y, z_den_con, theta = 50, phi = 40, col = "red", shade = 0.25, ticktype="detailed")
persp(x, y, z_dist_con, theta = 50, phi = 40, col = "blue", shade = 0.25, ticktype = "detailed")
x <- seq(-1, 4, 0.1)
y <- seq(-1, 4, 0.1)
z_den_con <- outer(x, y, den_con)
z_dist_con <- outer(x, y, dist_con)
persp(x, y, z_den_con, theta = 50, phi = 40, col = "green", shade = 0.25, ticktype="detailed")
persp(x, y, z_dist_con, theta = 50, phi = 40, col = "blue", shade = 0.25, ticktype = "detailed")
