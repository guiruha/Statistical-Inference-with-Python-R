df$FxM = max(df$Fx1, df$Fx2)
df$FxM = pmax(df$Fx1, df$Fx2)
D = max(df$FxM)
D
D
D = max(df$FxM)
D
ks.test(x, "pexp", 1/5)
library(nortest)
install.packages("nortest")
library(nortest)
lillie.test(muestra)
lillie.test(x)
library(nortest)
lillie.test(x)
set.seed(100)
x = rt(50, 3)
lillie.test(x)
set.seed(100)
x = rt(50, 3)
ad.test(x)
set.seed(100)
x = rt(50, 3)
shapiro.test(x)
install.packages("fBasics")
set.seed(100)
x = rt(50, 3)
library(fBasics)
dagoTest(x)
knitr::opts_chunk$set(echo = TRUE)
muestra_coches <- mtcars$gear
chisq.test(table(muestra_flores))
lambda <- 3.7
muestra_esperada <- ppois(muestra_coches, lambda = lambda)
chisq.test(muestra_coches, muestra_esperada)
muestra_coches
table(muestra_coches)
ks.test(muestra_coches, "pois", 3.7)
ks.test(muestra_coches, "poiss", 3.7)
ks.test(muestra_coches, "ppois", 3.7)
knitr::opts_chunk$set(echo = TRUE)
tabla_contingencia <- table(cut(mtcars$am, 4), mtcars$gear)
tabla_contingencia
tabla_frec_esperadas <- rowSums(tabla_contingencia)%*%t(colSums(tabla_contingencia))/sum(tabla_contingencia)
tabla_frec_esperadas
tabla_contingencia <- table(mtcars$am, mtcars$gear)
tabla_contingencia
tabla_frec_esperadas <- rowSums(tabla_contingencia)%*%t(colSums(tabla_contingencia))/sum(tabla_contingencia)
tabla_frec_esperadas
tabla_contingencia <- table(mtcars$am, mtcars$vs)
tabla_contingencia
tabla_frec_esperadas <- rowSums(tabla_contingencia)%*%t(colSums(tabla_contingencia))/sum(tabla_contingencia)
tabla_frec_esperadas
chisq.test(tabla_contingencia)
library(ggplot2)
library(dplyr)
iris %>%
ggplot(aes(x = Species, y = Petal.Length, color = Species)) +
geom_boxplot()+
geom_point()+
theme_bw()+
theme(lenged.position = "none")
iris %>%
ggplot(aes(x = Species, y = Petal.Length, color = Species)) +
geom_boxplot()+
geom_point()+
theme_bw()+
theme(legend.position = "none")
iris %>%
ggplot(aes(x = Species, y = Petal.Length, color = Species)) +
geom_boxplot()+
geom_point()+
theme(legend.position = "none")
aggregate(Petal.Length ~ Species, data = iris, FUN = var)
iris2 z- filter(.data = iris, Species %in% c("versicolor", "virginica"))
iris2 <- filter(.data = iris, Species %in% c("versicolor", "virginica"))
var.test(x = iris[iris$Species == "versicolor",]$Petal.Length, y = iris[iris$Species == "virginica",]$Petal.Length)
library(car)
library(CARS)
library(lawstat)
install.packages("lawstat")
library(lawstat)
?levene.test
levene.test(Petal.Length ~ Species, datas = iris, c = "median")
levene.test(iris$Petal.Length, iris$Species, c = "median")
levene.test(iris$Petal.Length, iris$Species, c = "median", correction.method = "correction.factor")
levene.test(iris$Petal.Length, iris$Species, location = "median", correction.method = "correction.factor")
levene.test(iris$Petal.Length, iris$Species, location = "median")
levene.test(iris2$Petal.Length, iris2$Species, location = "median")
bartlett.test(Petal.Length ~ Species, data = iris)
bartlett.test(Petal.Length ~ Species, data = iris2)
install.packages("HH", dep = TRUE)
fligner.test(Petal.Length ~ Species, data = iris)
levene.test(iris$Petal.Length, iris$Species, location = "median")
levene.test(iris2$Petal.Length, iris2$Species, location = "median")
levene.test(iris$Petal.Length, iris$Species, location = "median")
levene.test(iris$Petal.Length, iris$Species, location = "median")
install.packages("agricolae")
pf(13.92, 3, 12, lower.tail = FALSE)
pt(-0.632187, 16)
pt(0.632187, 16)
pt(0.1866, 16)
pt(0.81284, 16)
pt(0.81284, 5)
pt(0.81284, 15)
knitr::opts_chunk$set(echo = TRUE)
GSI = c(0.90,0.83,1.06,0.67,0.98,0.57,1.29,0.47,1.12,0.66,
1.30,1.01,2.88,1.52,2.42,1.02,2.66,1.32,2.94,1.63)
temperatura = factor(rep(c(27,16),each=10))
fotoperiodos = factor(rep(c(9,14),times=10))
tabla.datos.GSI = data.frame(GSI,temperatura,fotoperiodos)
head(tabla.datos.GSI)
suma_combinacion_niveles = aggregate(GSI ~ temmperatura + fotoperiodos, data = tabla.datos.GSI)
suma_combinacion_niveles = aggregate(GSI ~ temmperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "mean")
suma_combinancion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
media_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "mean")
media_combinacion_niveles
(media_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "sum"))
(suma_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "sum"))
(media_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "sum"))
(suma_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "sum"))
(media_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "media"))
(suma_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "sum"))
(media_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "media"))
(media_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "mean"))
(media_temperatue = aggregate(GSI ~ temperatura, data = tabla.datos.GSI, FUN = "mean"))
(suma_total = sum(tabla.datos.GSI))
(suma_total = sum(tabla.datos.GSI))
(media_muestral = mean(tabla.datos.GSI))
(suma_total = sum(tabla.datos.GSI$GSI))
(media_muestral = mean(tabla.datos.GSI$GSI))
(suma_cuadrados = sum(tabla.datos.GSI$GSI^2))
(SST = suma_cuadrados - suma_total^2/(a*b*n))
a <- 2; b <- 2; n <- 5
(SST = suma_cuadrados - suma_total^2/(a*b*n))
(SSA = (1 / (b*n)*sum(suma_fotoperiodos[,2]^2)- suma_total^2/(a*b*n)))
(suma_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "sum"))
a <- 2; b <- 2; n <- 5
(SST = suma_cuadrados - suma_total^2/(a*b*n))
(SSA = (1 / (b*n)*sum(suma_fotoperiodos[,2]^2)- suma_total^2/(a*b*n)))
(SSB = (1/(a*n))*sum(suma.temperatura[,2]^2)-suma.total^2/(a*b*n))
a <- 2; b <- 2; n <- 5
(SST = suma_cuadrados - suma_total^2/(a*b*n))
(SSA = (1 / (b*n)*sum(suma_fotoperiodos[,2]^2)- suma_total^2/(a*b*n)))
(SSB = (1/(a*n))*sum(suma_temperatura[,2]^2)-suma_total^2/(a*b*n))
(media_temperatura = aggregate(GSI ~ temperatura, data = tabla.datos.GSI, FUN = "mean"))
(suma_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "sum"))
(media_fotoperiodos = aggregate(GSI ~ fotoperiodos, data = tabla.datos.GSI, FUN = "mean"))
(suma_temperatura = aggregate(GSI ~ temperatura, data = tabla.datos.GSI, FUN = "sum"))
(media_temperatura = aggregate(GSI ~ temperatura, data = tabla.datos.GSI, FUN = "mean"))
(suma_total = sum(tabla.datos.GSI$GSI))
(media_muestral = mean(tabla.datos.GSI$GSI))
(suma_cuadrados = sum(tabla.datos.GSI$GSI^2))
a <- 2; b <- 2; n <- 5
(SST = suma_cuadrados - suma_total^2/(a*b*n))
(SSA = (1 / (b*n)*sum(suma_fotoperiodos[,2]^2)- suma_total^2/(a*b*n)))
(SSB = (1/(a*n))*sum(suma_temperatura[,2]^2)-suma_total^2/(a*b*n))
(SSTr = (1/n)*sum(suma_combinación.niveles[,3]^2)-suma_total^2/(a*b*n))
a <- 2; b <- 2; n <- 5
(SST = suma_cuadrados - suma_total^2/(a*b*n))
(SSA = (1 / (b*n)*sum(suma_fotoperiodos[,2]^2)- suma_total^2/(a*b*n)))
(SSB = (1/(a*n))*sum(suma_temperatura[,2]^2)-suma_total^2/(a*b*n))
(SSTr = (1/n)*sum(suma_combinación_niveles[,3]^2)-suma_total^2/(a*b*n))
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
suma_combinacion_niveles = aggregate(GSI ~ temperatura + fotoperiodos, data = tabla.datos.GSI, FUN = "sum")
suma_combinacion_niveles
a <- 2; b <- 2; n <- 5
(SST = suma_cuadrados - suma_total^2/(a*b*n))
(SSA = (1 / (b*n)*sum(suma_fotoperiodos[,2]^2)- suma_total^2/(a*b*n)))
(SSB = (1/(a*n))*sum(suma_temperatura[,2]^2)-suma_total^2/(a*b*n))
(SSTr = (1/n)*sum(suma_combinación_niveles[,3]^2)-suma_total^2/(a*b*n))
a <- 2; b <- 2; n <- 5
(SST = suma_cuadrados - suma_total^2/(a*b*n))
(SSA = (1 / (b*n)*sum(suma_fotoperiodos[,2]^2)- suma_total^2/(a*b*n)))
(SSB = (1/(a*n))*sum(suma_temperatura[,2]^2)-suma_total^2/(a*b*n))
(SSTr = (1/n)*sum(suma_combinacion_niveles[,3]^2)-suma_total^2/(a*b*n))
(SSAB = SSTr-SSA-SSB)
(SSE=SST-SSTr)
MSA <- SSA/(a - 1)
MSB <- SSB/(b -1 )
MSAB <- SSAB / ((a-1)*(b-1))
MSTr <- SSTr/(a*b-1)
MSE <- SSE/(a*b*(n-1))
summary(aov(X ~ A*B))
boxplot(GSI ~ fotoperiodos, data = tabla.datos.GSI, xlab = "Fotoperiodo", ylab = "GSI")
boxplot(GSI ~ fotoperiodos+temperatura, data = tabla.datos.GSI, xlab = "Combinación Fotoperiod y temperatura", ylab = "GSI")
boxplot(GSI ~ fotoperiodos+temperatura, data = tabla.datos.GSI, xlab = "Combinación fotoperiodo y temperatura", ylab = "GSI")
summary(aov(X ~ A*B))
summary(aov(GSI ~ fotoperiodos*temperatura, data = tabla.datos.GSI))
summary(aov(GSI ~ fotoperiodos:temperatura, data = tabla.datos.GSI))
interaction.plot(fotoperiodo, temperatura, GSI, xlab = "fotoperiodo", ylab = "GSI")
interaction.plot(fotoperiodos, temperatura, GSI, xlab = "fotoperiodo", ylab = "GSI")
interaction.plot(temperatura, fotoperiodos, GSI, xlab = "fotoperiodo", ylab = "GSI")
interaction.plot(temperatura, fotoperiodos, GSI, xlab = "temperatura", ylab = "GSI")
GSI <- tabla.datos.GSI$GSi
fotorperiodos <- tabla.datos.GSI$fotoperiodos
temperatura <- tabla.datos.GSI$temperatura
interaction.plot(fotoperiodos, temperatura, GSI, xlab = "fotoperiodo", ylab = "GSI")
interaction.plot(fotoperiodos, temperatura, GSI, xlab = "fotoperiodo", ylab = "GSI")
interaction.plot(temperatura, fotoperiodos, GSI, xlab = "temperatura", ylab = "GSI")
GSI <- tabla.datos.GSI$GSI
fotorperiodos <- tabla.datos.GSI$fotoperiodos
temperatura <- tabla.datos.GSI$temperatura
interaction.plot(fotoperiodos, temperatura, GSI, xlab = "fotoperiodo", ylab = "GSI")
interaction.plot(temperatura, fotoperiodos, GSI, xlab = "temperatura", ylab = "GSI")
knitr::opts_chunk$set(echo = TRUE)
sal <- c(1.8, 2.2, 3.5, 4.0, 4.3, 5.0)
tension <- c(100, 98, 110, 110, 112, 120)
(media_sal <- mean(sal))
(media_tension <- mean(tension))
sal <- c(1.8, 2.2, 3.5, 4.0, 4.3, 5.0)
tension <- c(100, 98, 110, 110, 112, 120)
(media_sal <- mean(sal))
(media_tension <- mean(tension))
(var_sal <- var(sal))
(cov_salten <- cov(sal, tension))
sal <- c(1.8, 2.2, 3.5, 4.0, 4.3, 5.0)
tension <- c(100, 98, 110, 110, 112, 120)
(media_sal <- mean(sal))
(media_tension <- mean(tension))
(var_sal <- var(sal))
(cov_salten <- cov(sal, tension))
b1 <- cov_salten/var_sal
b0 <- media_tension - b1*media_sal
sal <- c(1.8, 2.2, 3.5, 4.0, 4.3, 5.0)
tension <- c(100, 98, 110, 110, 112, 120)
(media_sal <- mean(sal))
(media_tension <- mean(tension))
(var_sal <- var(sal))
(cov_salten <- cov(sal, tension))
(b1 <- cov_salten/var_sal)
(b0 <- media_tension - b1*media_sal)
lm(tension ~ sal)
(round(media_tension - b0 - b1*media_sal), 6)
(round(media_tension - b0 - b1*media_sal, 6))
tension_estimada <- b0 + b1*sal
(mean(tension_estimada)-mean(tension))
errores <- tension_estimada - tension
SSE <- sum(errores**2)
n = lenght(sal)
errores <- tension_estimada - tension
SSE <- sum(errores**2)
n = length(sal)
(estimacion_varianza <- SSE/(n-2))
(SST <- sum((tension - media_tension)**2)
(SST <- sum((tension - media_tension)**2))
(SST <- sum((tension - media_tension)**2))
(SST <- sum((tension - media_tension)^2))
(SSR = sum((tension_estimada - media_tesnion)^2))
(SSR = sum((tension_estimada - media_tensio)^2))
(SSR = sum((tension_estimada - media_tension)^2))
(SSE <- sum((tension- tension_estimada)**2))
(round(SST-SSR-SSE, 6))
(R2 <- SSR/SST)
(R2 <- var(tension_estimada)/var(tension))
summary(lm(tension ~ sal))$r.squared
library(nortest)
lillie.test(errores)
(c(extremo_izb1, extremo_derb1))
alpha <- 0.05
S <- sqrt(estimacion_varianza)
extremo_izb1 <- b1-qt(1-alpha/2, n-2)*S/(sd(sal)*sqrt(n-1))
extremo_derb1 <- b1+qt(1-alpha/2, n-2)*S/(sd(sal)*sqrt(n-1))
(c(extremo_izb1, extremo_derb1))
alpha <- 0.05
S <- sqrt(estimacion_varianza)
extremo_izb1 <- b0-qt(1-alpha/2, n-2)*S*sqrt(1/n+media_sal^2/(n-1)var(sal)))
alpha <- 0.05
S <- sqrt(estimacion_varianza)
extremo_izb1 <- b0-qt(1-alpha/2, n-2)*S*sqrt(1/n+media_sal^2/((n-1)var(sal)))
alpha <- 0.05
S <- sqrt(estimacion_varianza)
extremo_izb1 <- b0-qt(1-alpha/2, n-2)*S*sqrt(1/n+media_sal^2/((n-1)*var(sal)))
extremo_derb1 <- b0+qt(1-alpha/2, n-2)*S*sqrt(1/n+media_sal^2/((n-1)*var(sal)))
(c(extremo_izb1, extremo_derb1))
confint(lm(tension~sal), level = 0.95)
extremo_izmux0 <- y0_estimado - qt(1-alpha/2, n-2)*S*sqrt(1/n+(x0-media_sal)^2/((n-1)*var(sal)))
alpha <- 0.05
x0 <- 4.5
y0_estimado <- b0 + b1*x0
extremo_izmux0 <- y0_estimado - qt(1-alpha/2, n-2)*S*sqrt(1/n+(x0-media_sal)^2/((n-1)*var(sal)))
extremo_dermux0 <-  y0_estimado + qt(1-alpha/2, n-2)*S*sqrt(1/n+(x0-media_sal)^2/((n-1)*var(sal)))
alpha <- 0.05
x0 <- 4.5
y0_estimado <- b0 + b1*x0
extremo_izmux0 <- y0_estimado - qt(1-alpha/2, n-2)*S*sqrt(1/n+(x0-media_sal)^2/((n-1)*var(sal)))
extremo_dermux0 <-  y0_estimado + qt(1-alpha/2, n-2)*S*sqrt(1/n+(x0-media_sal)^2/((n-1)*var(sal)))
(c(extremo_izmux0, extremo_dermux0))
extremo_izmux0 <- y0_estimado - qt(1-alpha/2, n-2)*S*sqrt(1+ 1/n+(x0-media_sal)^2/((n-1)*var(sal)))
extremo_dermux0 <-  y0_estimado + qt(1-alpha/2, n-2)*S*sqrt(1 + 1/n+(x0-media_sal)^2/((n-1)*var(sal)))
(c(extremo_izmux0, extremo_dermux0))
predict.lm(lm(tension~sal), newdata, interval = "confidence", level = 0.95)
newdata <- data.frame(sal = 4.5)
predict.lm(lm(tension~sal), newdata, interval = "confidence", level = 0.95)
newdata <- data.frame(sal = 4.5)
predict.lm(lm(tension~sal), newdata, interval = "confidence", level = 0.95)
predict.lm(lm(tension~sal), newdata, interval = "prediction", level = 0.95)
knitr::opts_chunk$set(echo = TRUE)
(t0 <- b1/(S/sd(sal)*sqrt(n-1)))
(p <- 2*pt(abs(t0), n-2), lower.tail = FALSE)
(p <- 2*pt(abs(t0), n-2, lower.tail = FALSE))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
sal <- c(1.8, 2.2, 3.5, 4.0, 4.3, 5.0)
tension <- c(100, 98, 110, 110, 112, 120)
(media_sal <- mean(sal))
(media_tension <- mean(tension))
(var_sal <- var(sal))
(cov_salten <- cov(sal, tension))
(b1 <- cov_salten/var_sal)
(b0 <- media_tension - b1*media_sal)
lm(tension ~ sal)
(round(media_tension - b0 - b1*media_sal, 6))
errores <- tension_estimada - tension
(SST <- sum((tension - media_tension)^2))
tension_estimada <- b0 + b1*sal
(mean(tension_estimada)-mean(tension))
errores <- tension_estimada - tension
SSE <- sum(errores**2)
n = length(sal)
(estimacion_varianza <- SSE/(n-2))
(SST <- sum((tension - media_tension)^2))
(SSR = sum((tension_estimada - media_tension)^2))
(SSE <- sum((tension- tension_estimada)**2))
(round(SST-SSR-SSE, 6)) # SST = SSR + SSE
(R2 <- SSR/SST)
(R2 <- var(tension_estimada)/var(tension))
summary(lm(tension ~ sal))$r.squared
library(nortest)
lillie.test(errores)
alpha <- 0.05
S <- sqrt(estimacion_varianza)
extremo_izb1 <- b1-qt(1-alpha/2, n-2)*S/(sd(sal)*sqrt(n-1))
extremo_derb1 <- b1+qt(1-alpha/2, n-2)*S/(sd(sal)*sqrt(n-1))
(c(extremo_izb1, extremo_derb1))
alpha <- 0.05
S <- sqrt(estimacion_varianza)
extremo_izb1 <- b0-qt(1-alpha/2, n-2)*S*sqrt(1/n+media_sal^2/((n-1)*var(sal)))
extremo_derb1 <- b0+qt(1-alpha/2, n-2)*S*sqrt(1/n+media_sal^2/((n-1)*var(sal)))
(c(extremo_izb1, extremo_derb1))
extremo_izmux0 <- y0_estimado - qt(1-alpha/2, n-2)*S*sqrt(1+ 1/n+(x0-media_sal)^2/((n-1)*var(sal)))
alpha <- 0.05
x0 <- 4.5
y0_estimado <- b0 + b1*x0
extremo_izmux0 <- y0_estimado - qt(1-alpha/2, n-2)*S*sqrt(1/n+(x0-media_sal)^2/((n-1)*var(sal)))
extremo_dermux0 <-  y0_estimado + qt(1-alpha/2, n-2)*S*sqrt(1/n+(x0-media_sal)^2/((n-1)*var(sal)))
(c(extremo_izmux0, extremo_dermux0))
extremo_izmux0 <- y0_estimado - qt(1-alpha/2, n-2)*S*sqrt(1+ 1/n+(x0-media_sal)^2/((n-1)*var(sal)))
extremo_dermux0 <-  y0_estimado + qt(1-alpha/2, n-2)*S*sqrt(1 + 1/n+(x0-media_sal)^2/((n-1)*var(sal)))
(c(extremo_izmux0, extremo_dermux0))
newdata <- data.frame(sal = 4.5)
predict.lm(lm(tension~sal), newdata, interval = "confidence", level = 0.95)
predict.lm(lm(tension~sal), newdata, interval = "prediction", level = 0.95)
(t0 <- b1/(S/sd(sal)*sqrt(n-1)))
(p <- 2*pt(abs(t0), n-2, lower.tail = FALSE))
summary(lm(tension ~ sal))
X = matrix(c(1, 78, 48.2, 2.75, 29.5, 1, 69, 45.5, 2.15, 26.3, 1, 77, 46.3, 4.41, 32.2, 1, 88, 49, 5.52, 36.5, 1, 67, 43, 3.21, 27.2, 1, 80, 48, 4.32, 27.7, 1, 74, 48, 2.31, 28.3, 1, 94, 53, 4.3, 30.3, 1, 102, 58, 3.71, 28.7), nrow = 9, byros = TRUE)
X = matrix(c(1, 78, 48.2, 2.75, 29.5, 1, 69, 45.5, 2.15, 26.3, 1, 77, 46.3, 4.41, 32.2, 1, 88, 49, 5.52, 36.5, 1, 67, 43, 3.21, 27.2, 1, 80, 48, 4.32, 27.7, 1, 74, 48, 2.31, 28.3, 1, 94, 53, 4.3, 30.3, 1, 102, 58, 3.71, 28.7), nrow = 9, byrow = TRUE)
y = c(57.5, 52.8, 61.3, 67, 53.5, 62.7, 56.2, 68.5, 69.2)
X = matrix(c(1, 78, 48.2, 2.75, 29.5, 1, 69, 45.5, 2.15, 26.3, 1, 77, 46.3, 4.41, 32.2, 1, 88, 49, 5.52, 36.5, 1, 67, 43, 3.21, 27.2, 1, 80, 48, 4.32, 27.7, 1, 74, 48, 2.31, 28.3, 1, 94, 53, 4.3, 30.3, 1, 102, 58, 3.71, 28.7), nrow = 9, byrow = TRUE)
y = c(57.5, 52.8, 61.3, 67, 53.5, 62.7, 56.2, 68.5, 69.2)
(estimaciones <- solve(t(X)%*%(X)%*%t(X)%*%y))
(estimaciones <- solve(t(X)%*%(X)%*%(t(X)%*%y)))
X = matrix(c(1, 78, 48.2, 2.75, 29.5, 1, 69, 45.5, 2.15, 26.3, 1, 77, 46.3, 4.41, 32.2, 1, 88, 49, 5.52, 36.5, 1, 67, 43, 3.21, 27.2, 1, 80, 48, 4.32, 27.7, 1, 74, 48, 2.31, 28.3, 1, 94, 53, 4.3, 30.3, 1, 102, 58, 3.71, 28.7), nrow = 9, byrow = TRUE)
y = c(57.5, 52.8, 61.3, 67, 53.5, 62.7, 56.2, 68.5, 69.2)
(estimaciones <- solve((t(X)%*%(X))%*%(t(X)%*%y)))
(estimaciones <- solve(t(X)%*%X)%*%(t(X)%*%y)))
X = matrix(c(1, 78, 48.2, 2.75, 29.5, 1, 69, 45.5, 2.15, 26.3, 1, 77, 46.3, 4.41, 32.2, 1, 88, 49, 5.52, 36.5, 1, 67, 43, 3.21, 27.2, 1, 80, 48, 4.32, 27.7, 1, 74, 48, 2.31, 28.3, 1, 94, 53, 4.3, 30.3, 1, 102, 58, 3.71, 28.7), nrow = 9, byrow = TRUE)
y = c(57.5, 52.8, 61.3, 67, 53.5, 62.7, 56.2, 68.5, 69.2)
(estimaciones <- solve(t(X)%*%X)%*%(t(X)%*%y))
lm(y ~ X[,2]+X[,3]+X[,4]+X[,5])
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))
round(mean(y) - t(estimaciones)%*%valores_medios, 6)
valores_medios <- apply(X[,1:5], 2, mean)
round(mean(y) - t(estimaciones)%*%valores_medios, 6)
valores_estimados <- X%*%estimaciones
round(mean(y) - mean(valores_estimados), 6)
errores <- y - valores_estimados
round(mean(errores))
SSE <- sum(errores ^ 2)
n <- dim(X)[1]
var(errores) - SSE/(n-1)
(SST = sum((y - mean(y))^2))
(SSR <- sum((valores_estimados - mean(y))^2))
(SSE <- sum((valores_estimados - y))^2))
(SSE <- sum((valores_estimados - y)^2))
round(SST - SSR - SSE, 6)
(R2 <- var(valores_estimados)/var(y))
(R2 <- SSR/SST)
(R2 <- var(valores_estimados)/var(y))
(R2 <- SSR/SST)
(R2 <- var(valores_estimados)/var(y))
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))$R.squared
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))$r.squared
(R2_adj <- 1- (R2)*(n-1)/(n-k-1))
k <- dim(X)[2]-1
(R2_adj <- 1- (R2)*(n-1)/(n-k-1))
k <- dim(X)[2]-1
(R2_adj <- 1 - (1 -R2)*(n-1)/(n-k-1))
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))$adj.r.squared
(summary(lm(y ~ X[,2]))$adj.r.squared)
(summary(lm(y ~ X[,2]+X[,3]))$adj.r.squared)
(summary(lm(y ~ X[,2]+X[,3]+X[,4]))$adj.r.squared)
(summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))$adj.r.squared)
(AIC(lm(y~X[,2]+X[,3]+X[,4])))
(AIC(lm(y~X[,2]+X[,3])))
(AIC(lm(y~X[,2])))
(AIC(lm(y~X[,2]+X[,3]+X[,4]+x[,5])))
(AIC(lm(y~X[,2]+X[,3]+X[,4]+X[,5])))
(AIC(lm(y~X[,2]+X[,3]+X[,4])))
(AIC(lm(y~X[,2]+X[,3])))
(AIC(lm(y~X[,2])))
(BIC(lm(y~X[,2]+X[,3]+X[,4]+X[,5])))
(BIC(lm(y~X[,2]+X[,3]+X[,4])))
(BIC(lm(y~X[,2]+X[,3])))
(BIC(lm(y~X[,2])))
lillie.test(errores)
(S2 <- SSE/(n-k-1))
S2*solve(t(X)%*%X)
(errores_estanda <- sqrt(S2*(diag(solve(t(X)%*%X))))
(errores_estandar <- sqrt(S2*(diag(solve(t(X)%*%X)))))
(errores_estandar <- sqrt(S2*diag(solve(t(X)%*%X))))
errores_estandar
(errores_estandar <- sqrt(S2*diag(solve(t(X)%*%X))))
alpha = 0.05
c(estimaciones_b[1] - qt(1-alpha/2, n-k-1)*errores_estandar[1],
estimaciones_b[1] + qt(1-alpha/2, n-k-1)*erroes_estandar[1])
alpha = 0.05
c(estimaciones[1] - qt(1-alpha/2, n-k-1)*errores_estandar[1],
estimaciones[1] + qt(1-alpha/2, n-k-1)*erroes_estandar[1])
alpha = 0.05
c(estimaciones[1] - qt(1-alpha/2, n-k-1)*errores_estandar[1],
estimaciones[1] + qt(1-alpha/2, n-k-1)*errores_estandar[1])
alpha = 0.05
c(estimaciones[5] - qt(1-alpha/2, n-k-1)*errores_estandar[5],
estimaciones[5] + qt(1-alpha/2, n-k-1)*errores_estandar[5])
alpha = 0.05
c(estimaciones[2] - qt(1-alpha/2, n-k-1)*errores_estandar[2],
estimaciones[2] + qt(1-alpha/2, n-k-1)*errores_estandar[2])
alpha = 0.05
c(estimaciones[2] - qt(1-alpha/2, n-k-1)*errores_estandar[2],
estimaciones[2] + qt(1-alpha/2, n-k-1)*errores_estandar[2])
alpha = 0.05
c(estimaciones[2] - qt(1-alpha/2, n-k-1)*errores_estandar[2],
estimaciones[2] + qt(1-alpha/2, n-k-1)*errores_estandar[2])
alpha = 0.05
c(estimaciones[2] - qt(1-alpha/2, n-k-1)*errores_estandar[2],
estimaciones[2] + qt(1-alpha/2, n-k-1)*errores_estandar[2])
alpha = 0.05
c(estimaciones[2] - qt(1-alpha/2, n-k-1)*errores_estandar[2],
estimaciones[2] + qt(1-alpha/2, n-k-1)*errores_estandar[2])
alpha = 0.05
c(estimaciones[1] - qt(1-alpha/2, n-k-1)*errores_estandar[1],
estimaciones[1] + qt(1-alpha/2, n-k-1)*errores_estandar[1])
alpha = 0.05
c(estimaciones[2] - qt(1-alpha/2, n-k-1)*errores_estandar[2],
estimaciones[2] + qt(1-alpha/2, n-k-1)*errores_estandar[2])
alpha = 0.05
c(estimaciones[3] - qt(1-alpha/2, n-k-1)*errores_estandar[3],
estimaciones[3] + qt(1-alpha/2, n-k-1)*errores_estandar[3])
alpha = 0.05
c(estimaciones[4] - qt(1-alpha/2, n-k-1)*errores_estandar[4],
estimaciones[4] + qt(1-alpha/2, n-k-1)*errores_estandar[4])
confint(lm(y~X[,2]+X[,3]+X[,4]+X[,5]), level = 0.95)
c(y0_estimado - qt(1-alpha/2, n-k-1)*sqrt(S2*(t(x0)%*%solve(t(X)%*%x0))))
c(y0_estimado - qt(1-alpha/2, n-k-1)*sqrt(S2*(t(x0)%*%solve(t(X)%*%X)%*%x0)))
alpha = 0.05
x0 = c(1, 75, 50, 4, 30)
y0_estimado = sum(estimaciones*x0)
c(y0_estimado - qt(1-alpha/2, n-k-1)*sqrt(S2*(t(x0)%*%solve(t(X)%*%X)%*%x0)))
alpha = 0.05
x0 = c(1, 75, 50, 4, 30)
y0_estimado = sum(estimaciones*x0)
c(y0_estimado - qt(1-alpha/2, n-k-1)*sqrt(S2*(t(x0)%*%solve(t(X)%*%X)%*%x0)), y0_estimado + qt(1-alpha/2, n-k-1)*sqrt(S2*(t(x0)%*%solve(t(X)%*%X)%*%x0)))
c(y0_estimado - qt(1-alpha/2, n-k-1)*sqrt(S2*(1+ t(x0)%*%solve(t(X)%*%X)%*%x0)), y0_estimado + qt(1-alpha/2, n-k-1)*sqrt(S2*(1+ t(x0)%*%solve(t(X)%*%X)%*%x0)))
newdata <- data.frame(x1 = x10, ..., xk = xk0)
newdata <- data.frame(x1 = 75, x2 = 50, x3 = 4, x4 = 30)
x1 <- X[, 2]
x2 <- X[, 3]
x3 <- X[, 4]
x4 <- X[, 5]
predict.lm(lm(y_bebes~x1+x2+x3+x4), newdata, interval = "confidence", level = 0.95)
newdata <- data.frame(x1 = 75, x2 = 50, x3 = 4, x4 = 30)
x1 <- X[, 2]
x2 <- X[, 3]
x3 <- X[, 4]
x4 <- X[, 5]
predict.lm(lm(y~x1+x2+x3+x4), newdata, interval = "confidence", level = 0.95)
