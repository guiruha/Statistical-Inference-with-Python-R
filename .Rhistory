(c(extremo_izb1, extremo_derb1))
alpha <- 0.05
S <- sqrt(estimacion_varianza)
extremo_izb1 <- b0-qt(1-alpha/2, n-2)*S*sqrt(1/n+media_sal^2/((n-1)*var(sal)))
extremo_derb1 <- b0+qt(1-alpha/2, n-2)*S*sqrt(1/n+media_sal^2/((n-1)*var(sal)))
(c(extremo_izb1, extremo_derb1))
extremo_izmux0 <- y0_estimado - qt(1-alpha/2, n-2)*S*sqrt(1+ 1/n+(x0-media_sal)^2/((n-1)*var(sal)))
alpha <- 0.05
x0 <- 4.5
y0_estimado <- b0 + b1*x0
extremo_izmux0 <- y0_estimado - qt(1-alpha/2, n-2)*S*sqrt(1/n+(x0-media_sal)^2/((n-1)*var(sal)))
extremo_dermux0 <-  y0_estimado + qt(1-alpha/2, n-2)*S*sqrt(1/n+(x0-media_sal)^2/((n-1)*var(sal)))
(c(extremo_izmux0, extremo_dermux0))
extremo_izmux0 <- y0_estimado - qt(1-alpha/2, n-2)*S*sqrt(1+ 1/n+(x0-media_sal)^2/((n-1)*var(sal)))
extremo_dermux0 <-  y0_estimado + qt(1-alpha/2, n-2)*S*sqrt(1 + 1/n+(x0-media_sal)^2/((n-1)*var(sal)))
(c(extremo_izmux0, extremo_dermux0))
newdata <- data.frame(sal = 4.5)
predict.lm(lm(tension~sal), newdata, interval = "confidence", level = 0.95)
predict.lm(lm(tension~sal), newdata, interval = "prediction", level = 0.95)
(t0 <- b1/(S/sd(sal)*sqrt(n-1)))
(p <- 2*pt(abs(t0), n-2, lower.tail = FALSE))
summary(lm(tension ~ sal))
X = matrix(c(1, 78, 48.2, 2.75, 29.5, 1, 69, 45.5, 2.15, 26.3, 1, 77, 46.3, 4.41, 32.2, 1, 88, 49, 5.52, 36.5, 1, 67, 43, 3.21, 27.2, 1, 80, 48, 4.32, 27.7, 1, 74, 48, 2.31, 28.3, 1, 94, 53, 4.3, 30.3, 1, 102, 58, 3.71, 28.7), nrow = 9, byros = TRUE)
X = matrix(c(1, 78, 48.2, 2.75, 29.5, 1, 69, 45.5, 2.15, 26.3, 1, 77, 46.3, 4.41, 32.2, 1, 88, 49, 5.52, 36.5, 1, 67, 43, 3.21, 27.2, 1, 80, 48, 4.32, 27.7, 1, 74, 48, 2.31, 28.3, 1, 94, 53, 4.3, 30.3, 1, 102, 58, 3.71, 28.7), nrow = 9, byrow = TRUE)
y = c(57.5, 52.8, 61.3, 67, 53.5, 62.7, 56.2, 68.5, 69.2)
X = matrix(c(1, 78, 48.2, 2.75, 29.5, 1, 69, 45.5, 2.15, 26.3, 1, 77, 46.3, 4.41, 32.2, 1, 88, 49, 5.52, 36.5, 1, 67, 43, 3.21, 27.2, 1, 80, 48, 4.32, 27.7, 1, 74, 48, 2.31, 28.3, 1, 94, 53, 4.3, 30.3, 1, 102, 58, 3.71, 28.7), nrow = 9, byrow = TRUE)
y = c(57.5, 52.8, 61.3, 67, 53.5, 62.7, 56.2, 68.5, 69.2)
(estimaciones <- solve(t(X)%*%(X)%*%t(X)%*%y))
(estimaciones <- solve(t(X)%*%(X)%*%(t(X)%*%y)))
X = matrix(c(1, 78, 48.2, 2.75, 29.5, 1, 69, 45.5, 2.15, 26.3, 1, 77, 46.3, 4.41, 32.2, 1, 88, 49, 5.52, 36.5, 1, 67, 43, 3.21, 27.2, 1, 80, 48, 4.32, 27.7, 1, 74, 48, 2.31, 28.3, 1, 94, 53, 4.3, 30.3, 1, 102, 58, 3.71, 28.7), nrow = 9, byrow = TRUE)
y = c(57.5, 52.8, 61.3, 67, 53.5, 62.7, 56.2, 68.5, 69.2)
(estimaciones <- solve((t(X)%*%(X))%*%(t(X)%*%y)))
(estimaciones <- solve(t(X)%*%X)%*%(t(X)%*%y)))
X = matrix(c(1, 78, 48.2, 2.75, 29.5, 1, 69, 45.5, 2.15, 26.3, 1, 77, 46.3, 4.41, 32.2, 1, 88, 49, 5.52, 36.5, 1, 67, 43, 3.21, 27.2, 1, 80, 48, 4.32, 27.7, 1, 74, 48, 2.31, 28.3, 1, 94, 53, 4.3, 30.3, 1, 102, 58, 3.71, 28.7), nrow = 9, byrow = TRUE)
y = c(57.5, 52.8, 61.3, 67, 53.5, 62.7, 56.2, 68.5, 69.2)
(estimaciones <- solve(t(X)%*%X)%*%(t(X)%*%y))
lm(y ~ X[,2]+X[,3]+X[,4]+X[,5])
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))
round(mean(y) - t(estimaciones)%*%valores_medios, 6)
valores_medios <- apply(X[,1:5], 2, mean)
round(mean(y) - t(estimaciones)%*%valores_medios, 6)
valores_estimados <- X%*%estimaciones
round(mean(y) - mean(valores_estimados), 6)
errores <- y - valores_estimados
round(mean(errores))
SSE <- sum(errores ^ 2)
n <- dim(X)[1]
var(errores) - SSE/(n-1)
(SST = sum((y - mean(y))^2))
(SSR <- sum((valores_estimados - mean(y))^2))
(SSE <- sum((valores_estimados - y))^2))
(SSE <- sum((valores_estimados - y)^2))
round(SST - SSR - SSE, 6)
(R2 <- var(valores_estimados)/var(y))
(R2 <- SSR/SST)
(R2 <- var(valores_estimados)/var(y))
(R2 <- SSR/SST)
(R2 <- var(valores_estimados)/var(y))
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))$R.squared
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))$r.squared
(R2_adj <- 1- (R2)*(n-1)/(n-k-1))
k <- dim(X)[2]-1
(R2_adj <- 1- (R2)*(n-1)/(n-k-1))
k <- dim(X)[2]-1
(R2_adj <- 1 - (1 -R2)*(n-1)/(n-k-1))
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))$adj.r.squared
(summary(lm(y ~ X[,2]))$adj.r.squared)
(summary(lm(y ~ X[,2]+X[,3]))$adj.r.squared)
(summary(lm(y ~ X[,2]+X[,3]+X[,4]))$adj.r.squared)
(summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))$adj.r.squared)
(AIC(lm(y~X[,2]+X[,3]+X[,4])))
(AIC(lm(y~X[,2]+X[,3])))
(AIC(lm(y~X[,2])))
(AIC(lm(y~X[,2]+X[,3]+X[,4]+x[,5])))
(AIC(lm(y~X[,2]+X[,3]+X[,4]+X[,5])))
(AIC(lm(y~X[,2]+X[,3]+X[,4])))
(AIC(lm(y~X[,2]+X[,3])))
(AIC(lm(y~X[,2])))
(BIC(lm(y~X[,2]+X[,3]+X[,4]+X[,5])))
(BIC(lm(y~X[,2]+X[,3]+X[,4])))
(BIC(lm(y~X[,2]+X[,3])))
(BIC(lm(y~X[,2])))
lillie.test(errores)
(S2 <- SSE/(n-k-1))
S2*solve(t(X)%*%X)
(errores_estanda <- sqrt(S2*(diag(solve(t(X)%*%X))))
(errores_estandar <- sqrt(S2*(diag(solve(t(X)%*%X)))))
(errores_estandar <- sqrt(S2*diag(solve(t(X)%*%X))))
errores_estandar
(errores_estandar <- sqrt(S2*diag(solve(t(X)%*%X))))
alpha = 0.05
c(estimaciones_b[1] - qt(1-alpha/2, n-k-1)*errores_estandar[1],
estimaciones_b[1] + qt(1-alpha/2, n-k-1)*erroes_estandar[1])
alpha = 0.05
c(estimaciones[1] - qt(1-alpha/2, n-k-1)*errores_estandar[1],
estimaciones[1] + qt(1-alpha/2, n-k-1)*erroes_estandar[1])
alpha = 0.05
c(estimaciones[1] - qt(1-alpha/2, n-k-1)*errores_estandar[1],
estimaciones[1] + qt(1-alpha/2, n-k-1)*errores_estandar[1])
alpha = 0.05
c(estimaciones[5] - qt(1-alpha/2, n-k-1)*errores_estandar[5],
estimaciones[5] + qt(1-alpha/2, n-k-1)*errores_estandar[5])
alpha = 0.05
c(estimaciones[2] - qt(1-alpha/2, n-k-1)*errores_estandar[2],
estimaciones[2] + qt(1-alpha/2, n-k-1)*errores_estandar[2])
alpha = 0.05
c(estimaciones[2] - qt(1-alpha/2, n-k-1)*errores_estandar[2],
estimaciones[2] + qt(1-alpha/2, n-k-1)*errores_estandar[2])
alpha = 0.05
c(estimaciones[2] - qt(1-alpha/2, n-k-1)*errores_estandar[2],
estimaciones[2] + qt(1-alpha/2, n-k-1)*errores_estandar[2])
alpha = 0.05
c(estimaciones[2] - qt(1-alpha/2, n-k-1)*errores_estandar[2],
estimaciones[2] + qt(1-alpha/2, n-k-1)*errores_estandar[2])
alpha = 0.05
c(estimaciones[2] - qt(1-alpha/2, n-k-1)*errores_estandar[2],
estimaciones[2] + qt(1-alpha/2, n-k-1)*errores_estandar[2])
alpha = 0.05
c(estimaciones[1] - qt(1-alpha/2, n-k-1)*errores_estandar[1],
estimaciones[1] + qt(1-alpha/2, n-k-1)*errores_estandar[1])
alpha = 0.05
c(estimaciones[2] - qt(1-alpha/2, n-k-1)*errores_estandar[2],
estimaciones[2] + qt(1-alpha/2, n-k-1)*errores_estandar[2])
alpha = 0.05
c(estimaciones[3] - qt(1-alpha/2, n-k-1)*errores_estandar[3],
estimaciones[3] + qt(1-alpha/2, n-k-1)*errores_estandar[3])
alpha = 0.05
c(estimaciones[4] - qt(1-alpha/2, n-k-1)*errores_estandar[4],
estimaciones[4] + qt(1-alpha/2, n-k-1)*errores_estandar[4])
confint(lm(y~X[,2]+X[,3]+X[,4]+X[,5]), level = 0.95)
c(y0_estimado - qt(1-alpha/2, n-k-1)*sqrt(S2*(t(x0)%*%solve(t(X)%*%x0))))
c(y0_estimado - qt(1-alpha/2, n-k-1)*sqrt(S2*(t(x0)%*%solve(t(X)%*%X)%*%x0)))
alpha = 0.05
x0 = c(1, 75, 50, 4, 30)
y0_estimado = sum(estimaciones*x0)
c(y0_estimado - qt(1-alpha/2, n-k-1)*sqrt(S2*(t(x0)%*%solve(t(X)%*%X)%*%x0)))
alpha = 0.05
x0 = c(1, 75, 50, 4, 30)
y0_estimado = sum(estimaciones*x0)
c(y0_estimado - qt(1-alpha/2, n-k-1)*sqrt(S2*(t(x0)%*%solve(t(X)%*%X)%*%x0)), y0_estimado + qt(1-alpha/2, n-k-1)*sqrt(S2*(t(x0)%*%solve(t(X)%*%X)%*%x0)))
c(y0_estimado - qt(1-alpha/2, n-k-1)*sqrt(S2*(1+ t(x0)%*%solve(t(X)%*%X)%*%x0)), y0_estimado + qt(1-alpha/2, n-k-1)*sqrt(S2*(1+ t(x0)%*%solve(t(X)%*%X)%*%x0)))
newdata <- data.frame(x1 = x10, ..., xk = xk0)
newdata <- data.frame(x1 = 75, x2 = 50, x3 = 4, x4 = 30)
x1 <- X[, 2]
x2 <- X[, 3]
x3 <- X[, 4]
x4 <- X[, 5]
predict.lm(lm(y_bebes~x1+x2+x3+x4), newdata, interval = "confidence", level = 0.95)
newdata <- data.frame(x1 = 75, x2 = 50, x3 = 4, x4 = 30)
x1 <- X[, 2]
x2 <- X[, 3]
x3 <- X[, 4]
x4 <- X[, 5]
predict.lm(lm(y~x1+x2+x3+x4), newdata, interval = "confidence", level = 0.95)
knitr::opts_chunk$set(echo = TRUE)
anova(lm(y~Xd))
knitr::opts_chunk$set(echo = TRUE)
sal <- c(1.8, 2.2, 3.5, 4.0, 4.3, 5.0)
tension <- c(100, 98, 110, 110, 112, 120)
(media_sal <- mean(sal))
(media_tension <- mean(tension))
(var_sal <- var(sal))
(cov_salten <- cov(sal, tension))
(b1 <- cov_salten/var_sal)
(b0 <- media_tension - b1*media_sal)
lm(tension ~ sal)
(round(media_tension - b0 - b1*media_sal, 6))
tension_estimada <- b0 + b1*sal
(mean(tension_estimada)-mean(tension))
errores <- tension_estimada - tension
SSE <- sum(errores**2)
n = length(sal)
(estimacion_varianza <- SSE/(n-2))
(SST <- sum((tension - media_tension)^2))
(SSR = sum((tension_estimada - media_tension)^2))
(SSE <- sum((tension- tension_estimada)**2))
(round(SST-SSR-SSE, 6)) # SST = SSR + SSE
(R2 <- SSR/SST)
(R2 <- var(tension_estimada)/var(tension))
summary(lm(tension ~ sal))$r.squared
library(nortest)
lillie.test(errores)
alpha <- 0.05
S <- sqrt(estimacion_varianza)
extremo_izb1 <- b1-qt(1-alpha/2, n-2)*S/(sd(sal)*sqrt(n-1))
extremo_derb1 <- b1+qt(1-alpha/2, n-2)*S/(sd(sal)*sqrt(n-1))
(c(extremo_izb1, extremo_derb1))
alpha <- 0.05
S <- sqrt(estimacion_varianza)
extremo_izb1 <- b0-qt(1-alpha/2, n-2)*S*sqrt(1/n+media_sal^2/((n-1)*var(sal)))
extremo_derb1 <- b0+qt(1-alpha/2, n-2)*S*sqrt(1/n+media_sal^2/((n-1)*var(sal)))
(c(extremo_izb1, extremo_derb1))
confint(lm(tension~sal), level = 0.95)
alpha <- 0.05
x0 <- 4.5
y0_estimado <- b0 + b1*x0
extremo_izmux0 <- y0_estimado - qt(1-alpha/2, n-2)*S*sqrt(1/n+(x0-media_sal)^2/((n-1)*var(sal)))
extremo_dermux0 <-  y0_estimado + qt(1-alpha/2, n-2)*S*sqrt(1/n+(x0-media_sal)^2/((n-1)*var(sal)))
(c(extremo_izmux0, extremo_dermux0))
extremo_izmux0 <- y0_estimado - qt(1-alpha/2, n-2)*S*sqrt(1+ 1/n+(x0-media_sal)^2/((n-1)*var(sal)))
extremo_dermux0 <-  y0_estimado + qt(1-alpha/2, n-2)*S*sqrt(1 + 1/n+(x0-media_sal)^2/((n-1)*var(sal)))
(c(extremo_izmux0, extremo_dermux0))
newdata <- data.frame(sal = 4.5)
predict.lm(lm(tension~sal), newdata, interval = "confidence", level = 0.95)
predict.lm(lm(tension~sal), newdata, interval = "prediction", level = 0.95)
(t0 <- b1/(S/sd(sal)*sqrt(n-1)))
(p <- 2*pt(abs(t0), n-2, lower.tail = FALSE))
summary(lm(tension ~ sal))
X = matrix(c(1, 78, 48.2, 2.75, 29.5, 1, 69, 45.5, 2.15, 26.3, 1, 77, 46.3, 4.41, 32.2, 1, 88, 49, 5.52, 36.5, 1, 67, 43, 3.21, 27.2, 1, 80, 48, 4.32, 27.7, 1, 74, 48, 2.31, 28.3, 1, 94, 53, 4.3, 30.3, 1, 102, 58, 3.71, 28.7), nrow = 9, byrow = TRUE)
y = c(57.5, 52.8, 61.3, 67, 53.5, 62.7, 56.2, 68.5, 69.2)
(estimaciones <- solve(t(X)%*%X)%*%(t(X)%*%y))
lm(y ~ X[,2]+X[,3]+X[,4]+X[,5])
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))
valores_medios <- apply(X[,1:5], 2, mean)
round(mean(y) - t(estimaciones)%*%valores_medios, 6)
valores_estimados <- X%*%estimaciones
round(mean(y) - mean(valores_estimados), 6)
errores <- y - valores_estimados
round(mean(errores))
SSE <- sum(errores ^ 2)
n <- dim(X)[1]
var(errores) - SSE/(n-1)
(SST <- sum((y - mean(y))^2))
(SSR <- sum((valores_estimados - mean(y))^2))
(SSE <- sum((valores_estimados - y)^2))
round(SST - SSR - SSE, 6)
(R2 <- SSR/SST)
(R2 <- var(valores_estimados)/var(y))
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))$r.squared
k <- dim(X)[2]-1
(R2_adj <- 1 - (1 - R2)*(n-1)/(n-k-1))
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))$adj.r.squared
(summary(lm(y ~ X[,2]))$adj.r.squared)
(summary(lm(y ~ X[,2]+X[,3]))$adj.r.squared)
(summary(lm(y ~ X[,2]+X[,3]+X[,4]))$adj.r.squared)
(summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))$adj.r.squared)
(AIC(lm(y~X[,2]+X[,3]+X[,4]+X[,5])))
(AIC(lm(y~X[,2]+X[,3]+X[,4])))
(AIC(lm(y~X[,2]+X[,3])))
(AIC(lm(y~X[,2])))
(BIC(lm(y~X[,2]+X[,3]+X[,4]+X[,5])))
(BIC(lm(y~X[,2]+X[,3]+X[,4])))
(BIC(lm(y~X[,2]+X[,3])))
(BIC(lm(y~X[,2])))
lillie.test(errores)
(S2 <- SSE/(n-k-1))
S2*solve(t(X)%*%X)
(errores_estandar <- sqrt(S2*diag(solve(t(X)%*%X))))
alpha = 0.05
c(estimaciones[1] - qt(1-alpha/2, n-k-1)*errores_estandar[1],
estimaciones[1] + qt(1-alpha/2, n-k-1)*errores_estandar[1])
alpha = 0.05
c(estimaciones[2] - qt(1-alpha/2, n-k-1)*errores_estandar[2],
estimaciones[2] + qt(1-alpha/2, n-k-1)*errores_estandar[2])
alpha = 0.05
c(estimaciones[3] - qt(1-alpha/2, n-k-1)*errores_estandar[3],
estimaciones[3] + qt(1-alpha/2, n-k-1)*errores_estandar[3])
alpha = 0.05
c(estimaciones[4] - qt(1-alpha/2, n-k-1)*errores_estandar[4],
estimaciones[4] + qt(1-alpha/2, n-k-1)*errores_estandar[4])
alpha = 0.05
c(estimaciones[5] - qt(1-alpha/2, n-k-1)*errores_estandar[5],
estimaciones[5] + qt(1-alpha/2, n-k-1)*errores_estandar[5])
confint(lm(y~X[,2]+X[,3]+X[,4]+X[,5]), level = 0.95)
alpha = 0.05
x0 = c(1, 75, 50, 4, 30)
y0_estimado = sum(estimaciones*x0)
c(y0_estimado - qt(1-alpha/2, n-k-1)*sqrt(S2*(t(x0)%*%solve(t(X)%*%X)%*%x0)), y0_estimado + qt(1-alpha/2, n-k-1)*sqrt(S2*(t(x0)%*%solve(t(X)%*%X)%*%x0)))
c(y0_estimado - qt(1-alpha/2, n-k-1)*sqrt(S2*(1+ t(x0)%*%solve(t(X)%*%X)%*%x0)), y0_estimado + qt(1-alpha/2, n-k-1)*sqrt(S2*(1+ t(x0)%*%solve(t(X)%*%X)%*%x0)))
newdata <- data.frame(x1 = 75, x2 = 50, x3 = 4, x4 = 30)
x1 <- X[, 2]
x2 <- X[, 3]
x3 <- X[, 4]
x4 <- X[, 5]
predict.lm(lm(y~x1+x2+x3+x4), newdata, interval = "confidence", level = 0.95)
predict.lm(lm(y~x1+x2+x3+x4), newdata, interval = "prediction", level = 0.95)
anova(lm(y~X[, 2:5]))
summary(lm(y~x1+x2+x3+x4))
set.seed(2020)
x <- runift(100)
set.seed(2020)
x <- runif(100)
y <- 1-2x+0.3*x*rnorm(100)
set.seed(2020)
x <- runif(100)
y <- 1-2*x+0.3*x*rnorm(100)
par(mfrow=c(1,2))
plot(x, y)
r = lm(y~x)
abline(r, col = "red")
plot(r$res~r$fitted.values, xlab = "Valores ajustados", ylab = "Residuos del modelo")
(X0 <- lenght(residuos)*summary(lm(residuos^2~x+I(x^3)))$r.squared)
(X0 <- length(residuos)*summary(lm(residuos^2~x+I(x^3)))$r.squared)
residuos <- r$residuals
(X0 <- length(residuos)*summary(lm(residuos^2~x+I(x^3)))$r.squared)
(X0 <- length(residuos)*summary(lm(residuos^2~x+I(x^2)))$r.squared)
(pvalue <- pchisq(X0, 2, lower.tail = FALSE))
I?
I?
?I
install.packages("lmtest")
library(lmtest)
bptest(r, ~x + I(x**2))
errores
(R2 <- summary(errores**2 ~ X))r.squared)
(R2 <- summary(lm(errores**2 ~ X))r.squared)
(R2 <- summary(lm(errores**2 ~ X)r.squared)
(R2 <- summary(lm(errores**2 ~ X)).r.squared)
(R2 <- summary(lm(errores**2 ~ X))$r.squared)
(pvalue <- pchisq(X0, k, lower.tail = FALSE))
(R2 <- summary(lm(errores**2 ~ X))$r.squared)
(X0 <- n*R2)
(pvalue <- pchisq(X0, k, lower.tail = FALSE))
bptest(lm(y~X))
bptest(lm(y~x))
bptest(lm(y~X))
bptest(lm(y~x))
?qqplot
sigma_estimada <- sum(errores**2)/(n-k-1)
qqplot(errores, distribution = "norm", sd = sqrt(sigma_estimada))
qqplot(errores, distribution = "norm", sqrt(sigma_estimada))
qqplot(errores, sqrt(sigma_estimada))
sigma_estimada <- sum(errores**2)/(n-k-1)
qqplot(errores, sqrt(sigma_estimada))
install.packages("car")
qqplot(errores)
sigma_estimada <- sum(errores**2)/(n-k-1)
qqplot(errores)
lillie.test(erorres)
lillie.test(errores)
library(car)
library(car)
sigma_estimada <- sum(errores**2)/(n-k-1)
car::qqPlot(errores, distribution = "norm", mean = 0, sd = sqrt(sigma_estimada))
diferencias <- errores[2:n] - errores[1:(n-1)]
(estadistico_d <- sum(diferencias**2)/sum(errores**2))
dwtest(r~alternative="greater")
dwtest(r,alternative="greater")
dwtest(r,alternative="less")
r$fitted.values
valores_ajustados2 <- r$fitted.values**2
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]+valores_ajustados2))[[4]]
knitr::opts_chunk$set(echo = TRUE)
sal <- c(1.8, 2.2, 3.5, 4.0, 4.3, 5.0)
tension <- c(100, 98, 110, 110, 112, 120)
(media_sal <- mean(sal))
(media_tension <- mean(tension))
(var_sal <- var(sal))
(cov_salten <- cov(sal, tension))
(b1 <- cov_salten/var_sal)
(b0 <- media_tension - b1*media_sal)
lm(tension ~ sal)
(round(media_tension - b0 - b1*media_sal, 6))
tension_estimada <- b0 + b1*sal
(mean(tension_estimada)-mean(tension))
errores <- tension_estimada - tension
SSE <- sum(errores**2)
n = length(sal)
(estimacion_varianza <- SSE/(n-2))
(SST <- sum((tension - media_tension)^2))
(SSR = sum((tension_estimada - media_tension)^2))
(SSE <- sum((tension- tension_estimada)**2))
(round(SST-SSR-SSE, 6)) # SST = SSR + SSE
(R2 <- SSR/SST)
(R2 <- var(tension_estimada)/var(tension))
summary(lm(tension ~ sal))$r.squared
library(nortest)
lillie.test(errores)
alpha <- 0.05
S <- sqrt(estimacion_varianza)
extremo_izb1 <- b1-qt(1-alpha/2, n-2)*S/(sd(sal)*sqrt(n-1))
extremo_derb1 <- b1+qt(1-alpha/2, n-2)*S/(sd(sal)*sqrt(n-1))
(c(extremo_izb1, extremo_derb1))
alpha <- 0.05
S <- sqrt(estimacion_varianza)
extremo_izb1 <- b0-qt(1-alpha/2, n-2)*S*sqrt(1/n+media_sal^2/((n-1)*var(sal)))
extremo_derb1 <- b0+qt(1-alpha/2, n-2)*S*sqrt(1/n+media_sal^2/((n-1)*var(sal)))
(c(extremo_izb1, extremo_derb1))
confint(lm(tension~sal), level = 0.95)
alpha <- 0.05
x0 <- 4.5
y0_estimado <- b0 + b1*x0
extremo_izmux0 <- y0_estimado - qt(1-alpha/2, n-2)*S*sqrt(1/n+(x0-media_sal)^2/((n-1)*var(sal)))
extremo_dermux0 <-  y0_estimado + qt(1-alpha/2, n-2)*S*sqrt(1/n+(x0-media_sal)^2/((n-1)*var(sal)))
(c(extremo_izmux0, extremo_dermux0))
extremo_izmux0 <- y0_estimado - qt(1-alpha/2, n-2)*S*sqrt(1+ 1/n+(x0-media_sal)^2/((n-1)*var(sal)))
extremo_dermux0 <-  y0_estimado + qt(1-alpha/2, n-2)*S*sqrt(1 + 1/n+(x0-media_sal)^2/((n-1)*var(sal)))
(c(extremo_izmux0, extremo_dermux0))
newdata <- data.frame(sal = 4.5)
predict.lm(lm(tension~sal), newdata, interval = "confidence", level = 0.95)
predict.lm(lm(tension~sal), newdata, interval = "prediction", level = 0.95)
(t0 <- b1/(S/sd(sal)*sqrt(n-1)))
(p <- 2*pt(abs(t0), n-2, lower.tail = FALSE))
summary(lm(tension ~ sal))
X = matrix(c(1, 78, 48.2, 2.75, 29.5, 1, 69, 45.5, 2.15, 26.3, 1, 77, 46.3, 4.41, 32.2, 1, 88, 49, 5.52, 36.5, 1, 67, 43, 3.21, 27.2, 1, 80, 48, 4.32, 27.7, 1, 74, 48, 2.31, 28.3, 1, 94, 53, 4.3, 30.3, 1, 102, 58, 3.71, 28.7), nrow = 9, byrow = TRUE)
y = c(57.5, 52.8, 61.3, 67, 53.5, 62.7, 56.2, 68.5, 69.2)
(estimaciones <- solve(t(X)%*%X)%*%(t(X)%*%y))
lm(y ~ X[,2]+X[,3]+X[,4]+X[,5])
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))
valores_medios <- apply(X[,1:5], 2, mean)
round(mean(y) - t(estimaciones)%*%valores_medios, 6)
valores_estimados <- X%*%estimaciones
round(mean(y) - mean(valores_estimados), 6)
errores <- y - valores_estimados
round(mean(errores))
SSE <- sum(errores ^ 2)
n <- dim(X)[1]
var(errores) - SSE/(n-1)
(SST <- sum((y - mean(y))^2))
(SSR <- sum((valores_estimados - mean(y))^2))
(SSE <- sum((valores_estimados - y)^2))
round(SST - SSR - SSE, 6)
(R2 <- SSR/SST)
(R2 <- var(valores_estimados)/var(y))
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))$r.squared
k <- dim(X)[2]-1
(R2_adj <- 1 - (1 - R2)*(n-1)/(n-k-1))
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))$adj.r.squared
(summary(lm(y ~ X[,2]))$adj.r.squared)
(summary(lm(y ~ X[,2]+X[,3]))$adj.r.squared)
(summary(lm(y ~ X[,2]+X[,3]+X[,4]))$adj.r.squared)
(summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))$adj.r.squared)
(AIC(lm(y~X[,2]+X[,3]+X[,4]+X[,5])))
(AIC(lm(y~X[,2]+X[,3]+X[,4])))
(AIC(lm(y~X[,2]+X[,3])))
(AIC(lm(y~X[,2])))
(BIC(lm(y~X[,2]+X[,3]+X[,4]+X[,5])))
(BIC(lm(y~X[,2]+X[,3]+X[,4])))
(BIC(lm(y~X[,2]+X[,3])))
(BIC(lm(y~X[,2])))
lillie.test(errores)
(S2 <- SSE/(n-k-1))
S2*solve(t(X)%*%X)
(errores_estandar <- sqrt(S2*diag(solve(t(X)%*%X))))
alpha = 0.05
c(estimaciones[1] - qt(1-alpha/2, n-k-1)*errores_estandar[1],
estimaciones[1] + qt(1-alpha/2, n-k-1)*errores_estandar[1])
alpha = 0.05
c(estimaciones[2] - qt(1-alpha/2, n-k-1)*errores_estandar[2],
estimaciones[2] + qt(1-alpha/2, n-k-1)*errores_estandar[2])
alpha = 0.05
c(estimaciones[3] - qt(1-alpha/2, n-k-1)*errores_estandar[3],
estimaciones[3] + qt(1-alpha/2, n-k-1)*errores_estandar[3])
alpha = 0.05
c(estimaciones[4] - qt(1-alpha/2, n-k-1)*errores_estandar[4],
estimaciones[4] + qt(1-alpha/2, n-k-1)*errores_estandar[4])
alpha = 0.05
c(estimaciones[5] - qt(1-alpha/2, n-k-1)*errores_estandar[5],
estimaciones[5] + qt(1-alpha/2, n-k-1)*errores_estandar[5])
confint(lm(y~X[,2]+X[,3]+X[,4]+X[,5]), level = 0.95)
alpha = 0.05
x0 = c(1, 75, 50, 4, 30)
y0_estimado = sum(estimaciones*x0)
c(y0_estimado - qt(1-alpha/2, n-k-1)*sqrt(S2*(t(x0)%*%solve(t(X)%*%X)%*%x0)), y0_estimado + qt(1-alpha/2, n-k-1)*sqrt(S2*(t(x0)%*%solve(t(X)%*%X)%*%x0)))
c(y0_estimado - qt(1-alpha/2, n-k-1)*sqrt(S2*(1+ t(x0)%*%solve(t(X)%*%X)%*%x0)), y0_estimado + qt(1-alpha/2, n-k-1)*sqrt(S2*(1+ t(x0)%*%solve(t(X)%*%X)%*%x0)))
newdata <- data.frame(x1 = 75, x2 = 50, x3 = 4, x4 = 30)
x1 <- X[, 2]
x2 <- X[, 3]
x3 <- X[, 4]
x4 <- X[, 5]
predict.lm(lm(y~x1+x2+x3+x4), newdata, interval = "confidence", level = 0.95)
predict.lm(lm(y~x1+x2+x3+x4), newdata, interval = "prediction", level = 0.95)
anova(lm(y~X[, 2:5]))
summary(lm(y~x1+x2+x3+x4))
set.seed(2020)
x2 <- runif(100)
y2 <- 1-2*x+0.3*x*rnorm(100)
par(mfrow=c(1,2))
plot(x2, y2)
r = lm(y2~x2)
abline(r, col = "red")
plot(r$res~r$fitted.values, xlab = "Valores ajustados", ylab = "Residuos del modelo")
residuos <- r$residuals
(X0 <- length(residuos)*summary(lm(residuos^2~x2+I(x2^2)))$r.squared)
(pvalue <- pchisq(X0, 2, lower.tail = FALSE))
library(lmtest)
bptest(r, ~x2 + I(x2**2))
(R2 <- summary(lm(errores**2 ~ X))$r.squared)
(X0 <- n*R2)
(pvalue <- pchisq(X0, k, lower.tail = FALSE))
valores_ajustados2 <- r$fitted.values**2
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]+valores_ajustados2))[[4]]
newr <- lm(y ~ X[,2]+X[,3]+X[,4]+X[,5])
valores_ajustados2 <- newr$fitted.values**2
summary(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]+valores_ajustados2))[[4]]
library(car)
car::residualPlots(newr, plot = TRUE)
library(car)
crPlots(newr)
(valores_hat <- hatvalues(newr))
which(valores_hat > 2*(k+1)/n)
(valores_hat <- hatvalues(newr))
which(valores_hat > 2*(k+1)/n)
outlierTest(newr)
(distancias_cook <- cooks.distance(newr))
(which(distancias_cook > 4/(n-k-1)))
step(newr)
step(lm(y ~ X[,1]+X[,2]+X[,3]+X[,4]))
step(lm(y ~ X[,2]+X[,3]+X[,4]+X[,5]))
summary(lm(y~X[, 2:5]))
set.seed(2020)
x2 <- runif(100)
y2 <- 1-2*x+0.3*x*rnorm(100)
par(mfrow=c(1,2))
plot(x2, y2)
r = lm(y2~x2)
abline(r, col = "red")
plot(r$res~r$fitted.values, xlab = "Valores ajustados", ylab = "Residuos del modelo")
plot(r$res~r$fitted.values, xlab = "Valores ajustados", ylab = "Residuos del modelo")
abline(r, col = "red")
plot(x2, y2)
abline(r, col = "red")
