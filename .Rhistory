knitr::opts_chunk$set(echo = TRUE)
medias_petal <- replicate(10000,mean(sample(iris$Petal.Length, 40, replace = TRUE)))
head(medias_petal, 10)
mean(medias_petal)
mean(iris$Petal.Length)
sd(medias_petal) # El error estándar de las medias anteriores deberia acercarse a la desviación de la población divido por raíz de n
sd(iris$Petal.Length) / sqrt(40)
hist(medias_petal)
medias_petal <- replicate(100000,mean(sample(iris$Petal.Length, 40, replace = TRUE)))
medias_petal <- replicate(100000,mean(sample(iris$Petal.Length, 40, replace = TRUE)))
head(medias_petal, 10)
mean(medias_petal)
sd(medias_petal)
sd(iris$Petal.Length) / sqrt(40)
hist(medias_petal)
hist(medias_petal)
x = c(-4, -2, -2, -1, 0, 1, 2, 3, 4)
sum(x)
x = c(-4, -3, -2, -1, 0, 1, 2, 3, 4)
sum(x)
length(x9)
length(x)
sum(x)/length(x)
mean(x)
sd(x)
var(x)
sd(x) ^ 2
sd(x) / sqrt(n)
sd(x) / sqrt(length(n))
sd(x) / sqrt(length(n))
sd(x) / sqrt(length(x))
sqrt(var(x)) / sqrt(length(x))
var(x)
var_muestral = n/(n-1)*var_real
var_real = sum(x^2)/length(x) - mean(x)^2
n = length(x)
var_muestral = n/(n-1)*var_real
knitr::opts_chunk$set(echo = TRUE)
med <- mean(max_vel)
max_vel <- c(190, 195, 193, 177, 201, 187)
med <- mean(max_vel)
var_muestral <- var(max_vel)/length(max_vel)
# X(4)
sort(max_vel)
# X(4)
sort(max_vel)[4]
knitr::opts_chunk$set(echo = TRUE)
flores_elegidas <- sample(1:150,60,replace=TRUE)
muestra_flores <- iris[flores_elegidas]
muestra_flores <- iris[flores_elegidas, ]
table(muestra_flores)
flores_elegidas <- sample(1:150,60,replace=TRUE)
muestra_flores <- iris[flores_elegidas, ]
table(muestra_flores)
table(muestra_flores$Species=="setosa")
flores_elegidas <- sample(1:150,60,replace=TRUE)
muestra_flores <- iris[flores_elegidas, ]
table(muestra_flores$Species=="setosa")
prop_setosa <- (table(muestra_flores$Species=="setosa"))[2] / lenght(muestra_flores$Species)
flores_elegidas <- sample(1:150,60,replace=TRUE)
muestra_flores <- iris[flores_elegidas, ]
table(muestra_flores$Species=="setosa")
prop_setosa <- (table(muestra_flores$Species=="setosa"))[2] / length(muestra_flores$Species)
prop_setosa
props_muestrales <- replicate(10000, (table(muestra_flores$Species=="setosa"))[2] / length(muestra_flores$Species))
prop_muestrales
props_muestrales
sd(props_muestrales)
props_muestrales <- replicate(10000, (table(muestra_flores$Species=="setosa"))[2] / 60)
sd(props_muestrales)
props_muestrales <- replicate(1000, (table(muestra_flores$Species=="setosa"))[2] / length(muestra_flores$Species))
sd(props_muestrales)
props_muestrales <- replicate(100, (table(muestra_flores$Species=="setosa"))[2] / length(muestra_flores$Species))
sd(props_muestrales) #El error estándar es muy reducido
flores_elegidas <- sample(1:150,50,replace=TRUE)
muestra_flores <- iris[flores_elegidas, ]
table(muestra_flores$Species=="setosa")
prop_setosa <- (table(muestra_flores$Species=="setosa"))[2] / length(muestra_flores$Species)
prop_setosa # proporción muestral de la variante setosa
props_muestrales <- replicate(100, (table(muestra_flores$Species=="setosa"))[2] / length(muestra_flores$Species))
sd(props_muestrales) #El error estándar es muy reducido
flores_elegidas <- sample(1:150,60,replace=TRUE)
muestra_flores <- iris[flores_elegidas, ]
table(muestra_flores$Species=="setosa")
prop_setosa <- (table(muestra_flores$Species=="setosa"))[2] / length(muestra_flores$Species)
prop_setosa # proporción muestral de la variante setosa
props_muestrales <- replicate(100, (table(muestra_flores$Species=="setosa"))[2] / length(muestra_flores$Species))
sd(props_muestrales) #El error estándar es muy reducido
class(sd(props_muestrales)) #El error estándar es muy reducido
float(sd(props_muestrales)) #El error estándar es muy reducido
sd(props_muestrales) #El error estándar es muy reducido
props_muestrales <- replicate(100000, (table(muestra_flores$Species=="setosa"))[2] / length(muestra_flores$Species))
props_muestrales <- replicate(100000, (table(muestra_flores$Species=="setosa"))[2] / length(muestra_flores$Species))
sd(props_muestrales) #El error estándar es muy reducido
set.seed(1002)
flores_elegidas <- sample(1:150,60,replace=TRUE)
muestra_flores <- iris[flores_elegidas, ]
table(muestra_flores$Species=="setosa")
prop_setosa <- (table(muestra_flores$Species=="setosa"))[2] / length(muestra_flores$Species)
prop_setosa # proporción muestral de la variante setosa
props_muestrales <- replicate(1000, (table(muestra_flores$Species=="setosa"))[2] / length(muestra_flores$Species))
sd(props_muestrales) #El error estándar es muy reducido
props_muestrales <- replicate(1000, (table(sample(iris$Species, 60, replace=TRUE)=="setosa"))[2] / length(muestra_flores$Species))
sd(props_muestrales) #El error estándar es muy reducido
hist(props_muestrales)
taxis = c(1217, 600, 883, 1026, 150, 725, 297, 137, 38, 961, 538, 1154, 314, 1121, 823, 156, 940, 99, 967, 123, 1341, 3141 ,1245, 575, 1445, 1332, 1343, 1234, 1343)
(N=max(taxis) + (max(taxis) - length(taxis)) / length(taxis))
taxis = c(1217, 600, 883, 1026, 150, 725, 297, 137, 38, 961, 538, 1154, 314, 1121, 823, 156, 940, 99, 967, 123, 1341, 141 ,1245, 575, 1445, 1332, 1343, 1234, 1343)
(N=max(taxis) + (max(taxis) - length(taxis)) / length(taxis))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
muestra_poisson <-  rpois(50, lambda = 5)
muestra_poisson
fitdistr(muestra_poisson, densfun="poisson")
(estimación_lambda = mean(muestra_poisson))
(estimación_error_típico = sqrt(estimación_lambda/50))
(estimación_lambda = mean(muestra_poisson))
(estimación_error_típico = sqrt(estimación_lambda/50))
fitdistr(muestra:poisson, desfun= "normal")
fitdistr(muestra_poisson, desfun= "normal")
fitdistr(muestra_poisson, densfun= "normal")
sd(muestra_poisson)*sqrt(49/50)
knitr::opts_chunk$set(echo = TRUE)
muestra_irist = sample(1:150, 30, replace = TRUE)
set.seed(1000)
muestra_irist = sample(1:150, 30, replace = TRUE)
leng_petalo <- iris[muestra_irist,]$Petal.Length
len_petal <- iris[muestra_irist,]$Petal.Length
set.seed(1000)
muestra_iris <- sample(1:150, 30, replace = TRUE)
len_petal <- iris[muestra_irist,]$Petal.Length
t.test(len_petal, conf.level = 0.95)
conf_int <- t.test(len_petal, conf.level = 0.95)$conf.int
conf_int
valores_población <- rnomr(10^7)
valores_población <- rnorm(10^7)
(mu<-mean(valores_población))
¿Qué papael juega la confianza en los intervalos de confianza?
valores_población <- rnorm(10^7)
¿Qué papael juega la confianza en los intervalos de confianza?
valores_población <- rnorm(10^7)
set.seed(2020)
valores_población <- rnorm(10^7)
(mu<-mean(valores_población))
muestras <- replicate(200, sample(valores_población, 50, replace = TRUE))
ConfIntT <- function(X, confianza = 0.95) {
t.test(X, conf.level = confianza)$conf.int
}
conf_int_t <- apply(muestras, sample(valores_población, 50, replace = TRUE))
conf_int_t <- apply(muestras, FUN = ConfIntT)
conf_int_t <- apply(muestras, FUN = ConfIntT, MARGIN = 2)
conf_int_t
conf_cont_mu <- length(which((mu>conf_int_t[1,]))
conf_cont_mu <- length(which((mu>=conf_int_t[1,]
conf_cont_mu <- length(which((mu>=conf_int_t[1,]
conf_cont_mu
conf_cont_mu <- length(which((mu>=conf_int_t[1,]
conf_cont_mu <- length(which((mu>=conf_int_t[1,] & (mu<= conf_int_t[2,])))
conf_cont_mu <- length(which((mu>=conf_int_t[1,]) & (mu<= conf_int_t[2,])))
conf_cont_mu
conf_cont_mu / 200
conf_cont_mu / 200 * 100
plot(1, type = "n", xlim=c(-0.8, 0.8), ylim=c(0,200), xlab = "Valores", ylab = "Repeticiones", main = "")
set.seed(1000)
muestra_iris <- sample(1:150, 30, replace = TRUE)
len_petal <- iris[muestra_irist,]$Petal.Length
conf_int <- t.test(len_petal, conf.level = 0.95)$conf.int
conf_int
#¿Qué papael juega la confianza en los intervalos de confianza?
set.seed(2020)
valores_población <- rnorm(10^7)
(mu<-mean(valores_población))
muestras <- replicate(200, sample(valores_población, 50, replace = TRUE))
ConfIntT <- function(X, confianza = 0.95) {
t.test(X, conf.level = confianza)$conf.int
}
conf_int_t <- apply(muestras, FUN = ConfIntT, MARGIN = 2)
conf_int_t
conf_cont_mu <- length(which((mu>=conf_int_t[1,]) & (mu<= conf_int_t[2,])))
conf_cont_mu / 200 * 100
plot(1, type = "n", xlim=c(-0.8, 0.8), ylim=c(0,200), xlab = "Valores", ylab = "Repeticiones", main = "")
seg.int <- function(i) {
color = "ligth blue";
if ((mu< conf_int_t[1, i] | mu> conf_int_t[2, i])){color = "red"}
segments(conf_int_t[1,i], i, conf_int_t[2,i], col = color, lwd=2)
}
sapply(1:200, FUN = seg.int)
set.seed(1000)
muestra_iris <- sample(1:150, 30, replace = TRUE)
len_petal <- iris[muestra_irist,]$Petal.Length
conf_int <- t.test(len_petal, conf.level = 0.95)$conf.int
conf_int
#¿Qué papael juega la confianza en los intervalos de confianza?
set.seed(2020)
valores_población <- rnorm(10^7)
(mu<-mean(valores_población))
muestras <- replicate(200, sample(valores_población, 50, replace = TRUE))
ConfIntT <- function(X, confianza = 0.95) {
t.test(X, conf.level = confianza)$conf.int
}
conf_int_t <- apply(muestras, FUN = ConfIntT, MARGIN = 2)
conf_int_t
conf_cont_mu <- length(which((mu>=conf_int_t[1,]) & (mu<= conf_int_t[2,])))
conf_cont_mu / 200 * 100
plot(1, type = "n", xlim=c(-0.8, 0.8), ylim=c(0,200), xlab = "Valores", ylab = "Repeticiones", main = "")
seg.int <- function(i) {
color = "light blue";
if ((mu< conf_int_t[1, i] | mu> conf_int_t[2, i])){color = "red"}
segments(conf_int_t[1,i], i, conf_int_t[2,i], col = color, lwd=2)
}
sapply(1:200, FUN = seg.int)
abline(v=mu, lwd=2)
install.packages("epitools")
library(epitools)
set.seed(1000)
n_flores <- sample(1:150, 60, replace=TRUE)
muestra_flores <- iris[n_flores,]
head(muestra.flores, 10)
head(muestra_flores, 10)
count_flores <- table(muestra_flores$Species=="Setosa")[2]
count_flores
count_flores <- table(muestra_flores$Species=="setosa")[2]
count_flores
binom.exact(count_flores,60, conf.level = 0.95)
binom.wilson(count_flores, 60, conf.level = 0.95)
binom.approx(count_flores, 60, conf.level = 0.95)
muestraL <- sample(100, c(TRUE, FALSE), replace = TRUE)
muestraL <- sample(c(TRUE, FALSE), 100, replace = TRUE)
muestraL
muestraL <- sample(c(TRUE, FALSE), 500, replace = TRUE)
binom.approx(muestraL, 500, conf.level = 0.95)
muestraLL <- muestraL[muestraL == TRUE, ]
muestraLL <- muestraL[,muestraL == TRUE]
muestraLL <- muestraL[muestraL == TRUE]
binom.approx(muestraL, 500, conf.level = 0.95)
binom.approx(muestraLL, 500, conf.level = 0.95)
muestraL <- table(muestraL)[2]
muestraL
binom.approx(muestraLL, 500, conf.level = 0.95)
binom.approx(muestraL, 500, conf.level = 0.95)
binom.approx(muestra_flores, 60, conf.level = 0.95)
binom.approx(count_flores, 60, conf.level = 0.95)
tiempo = c(12, 13, 13, 14, 14, 14, 15, 15, 16, 17, 18, 18, 19, 19, 25, 25, 26, 27, 30, 33, 34, 35, 40, 40, 51, 51, 58, 59, 83)
var_muestra <- var(tiempo)
(var_muestra <- var(tiempo))
n <- length(tiempo)
(cuartil_izquierda <- qchisq(1-0.05/2, n-1)
(cuartil_derecho <- qchisq(0.05/2, n-1))
valor_izquierdo <- (n-1)*var_muestra/cuantil_izquierda
valor_izquierdo <- (n - 1)*var_muestra/cuantil_izquierda
(cuartil_izquierda <- qchisq(1-0.05/2, n-1)
(cuartil_derecho <- qchisq(0.05/2, n-1))
valor_izquierdo <- (n - 1)*var_muestra/cuantil_izquierda
(cuartil_izquierda <- qchisq(1-0.05/2, n-1))
valor_izquierdo <- (n-1)*var_muestra/cuantil_izquierda
(cuantil_izquierda <- qchisq(1-0.05/2, n-1))
(cuantil_derecho <- qchisq(0.05/2, n-1))
valor_derecho <- (n-1)*var_muestra/cuantil_derecha
valor_derecho <- (n-1)*var_muestra/cuantil_derecho
conf_int <- c(valor_izquierdo, valor_derecho)
valor_izquierdo <- (n-1)*var_muestra/cuantil_izquierda
conf_int <- c(valor_izquierdo, valor_derecho)
conf_int
conf_int_sd <- c(sqrt(valor_izquierdo), sqrt(valor_derecho))
conf_int_sd
library(EnvStats)
install.packages("EnvStats")
library(EnvStats)
library(EnvStats)
width_muestra <- iris[flores_escogidas,]
width_muestra <- iris[muestras_iris,]$Sepal.Width
width_muestra <- iris[muestra_iris,]$Sepal.Width
width_muestra
hist(width_muestra)
width_muestra <- iris[muestra_flores,]$Sepal.Width
width_muestra <- iris[muestra_flores,]$Sepal.Width
width_muestra <- iris[n_flores,]$Sepal.Width
hist(width_muestra)
hist(width_muestra, bins = 30)
varTest(width_muestra, conf.level = 0.95)$conf.int
sqrt(varTest(width_muestra, conf.level = 0.95)$conf.int)
X <- replicate(1000, var(sample(iris[n_flores, ]$Petal.Length, replace = TRUE)))
round(boots_interval)
boots_interval <- c(quantile(X, aplha/2),
quantile(X, 1- alpha/2))
alpha = 0.05
boots_interval <- c(quantile(X, aplha/2),
quantile(X, 1- alpha/2))
round(boots_interval)
boots_interval <- c(quantile(X, alpha/2),
quantile(X, 1- alpha/2))
round(boots_interval)
round(boots_interval, 3)
install.packages("bot")
install.packages("boot")
library(boot)
boot(X, var, 1000)
var_boot <- function(X, indices) {var(X[indices])}
simulacion <- boot(iris[n_flores,]$Petal.Length, var.boot, 1000)
simulacion <- boot(iris[n_flores,]$Petal.Length, var_boot, 1000)
simulacion
boot.ci(simulacion)
boot.ci(simulacion)$percent[4:5]
?boot.ci
plot(1, type = "n", xlim=c(-0.8, 0.8), ylim=c(0,200), xlab = "Valores", ylab = "Repeticiones", main = "")
seg.int <- function(i) {
color = "light blue";
if ((mu< conf_int_t[1, i] | mu> conf_int_t[2, i])){color = "red"}
segments(conf_int_t[1,i], i, conf_int_t[2,i], col = color, lwd=2)
}
sapply(1:200, FUN = seg.int)
abline(v=mu, lwd=2)
plot(1, type = "n", xlim=c(-0.8, 0.8), ylim=c(0,200), xlab = "Valores", ylab = "Repeticiones", main = "")
seg.int <- function(i) {
color = "light blue";
if ((mu< conf_int_t[1, i] | mu> conf_int_t[2, i])){color = "red"}
segments(conf_int_t[1,i], i, conf_int_t[2,i], col = color, lwd=2)
}
sapply(1:200, FUN = seg.int)
plot(1, type = "n", xlim=c(-0.8, 0.8), ylim=c(0,200), xlab = "Valores", ylab = "Repeticiones", main = "")
sapply(1:200, FUN = seg.int)
plot(1, type = "n", xlim=c(-0.8, 0.8), ylim=c(0,200), xlab = "Valores", ylab = "Repeticiones", main = "")
seg.int <- function(i) {
color = "light blue";
if ((mu< conf_int_t[1, i] | mu> conf_int_t[2, i])){color = "red"}
segments(conf_int_t[1,i], i, conf_int_t[2,i], col = color, lwd=2)
}
sapply(1:200, FUN = seg.int)
abline(v=mu, lwd=2)
plot(1, type = "n", xlim=c(-0.8, 0.8), ylim=c(0,200), xlab = "Valores", ylab = "Repeticiones", main = "")
seg.int <- function(i) {
color = "light blue";
if ((mu< conf_int_t[1, i] | mu> conf_int_t[2, i])){color = "red"}
segments(conf_int_t[1,i], i, conf_int_t[2,i], col = color, lwd=2)
}
sapply(1:200, FUN = seg.int)
install.packages("tinytex")
installr::installr::MikTex
install.packages("MikTex")
knitr::opts_chunk$set(echo = TRUE)
colesterol
long_sep_mue <- iris[flores_ele,]$Sepal.Length
flores_ele <- sample(1:150, 40, replace = TRUE)
long_sep_mue <- iris[flores_ele,]$Sepal.Length
?t.test
t.test(long_sep_mue, mu = 5.7, conf.level = 0.95)
t.test(long_sep_mue, mu = 5.7, conf.level = 0.95, alternative = "greater")
test_t <- t.test(long_sep_mue, mu = 5.7, conf.level = 0.95, alternative = "greater")
test_t$conf.int
test_t$p.value
binom.test(21, 25, p=0.8,alternative = "greater", conf.leve = 0.95)
birthwt
library(MASS)
birthwt
set.seed(1001)
madres_elegidas <- sample(1:189, replace = TRUE)
table(madres_elegidas$smoke)
table(muestra_madres$smoke)
madres_elegidas <- sample(1:189, replace = TRUE)
table(muestra_madres$smoke)
muestra_madres <- birthwt(madres_elegidas)
muestra_madres <- birthwt[madres_elegidas,]
table(muestra_madres$smoke)
madres_elegidas <- sample(1:189,40, replace = TRUE)
muestra_madres <- birthwt[madres_elegidas,]
table(muestra_madres$smoke)
x <- table(muestra_madres$smoke)
x <- table(muestra_madres$smoke)[2]
binom.test(x,length(madres_elegidas), p=0.3, alternative = "greate")
binom.test(x,length(madres_elegidas), p=0.3, alternative = "greater")
knitr::opts_chunk$set(echo = TRUE)
Per = c(521, 742, 593, 635, 788, 717, 606, 639, 666, 624)
std(Per)
st(Per)
sd(Per)
Chi2 <- (n -1)*sd(Per) / varz
n  <- 10
varz <- 6400
alpha <- 0.05
Chi2 <- (n -1)*sd(Per) / varz
Chi2
Chi2 <- (n -1)*var(Per) / varz
Chi2
var(Per)
Chi2 <- (n -1)*var(Per) / varz
Chi2
pchisq(c(1-alpha/2, alpha/2), Chi2)
pchisq(c(1-alpha/2, alpha/2), Chi2, df = 9)
pchisq(c(1-alpha/2, alpha/2), Per, df = 9)
pchisq(c(1-alpha/2, alpha/2), Chi2, df = 9)
qchisq(c(1-alpha/2, alpha/2), Chi2, df = 9)
install.packages(TeachingDemos)
install.packages("TeachingDemos")
library(TeachingDemos)
sigma.test(x = Per, sigma = 80, conf.level = 0.95, alternative = "two.sided")
set.seed(2020)
flores_elegidas <- sample(1:150, 40, replace = TRUE)
muestra_flores = iris[flores_elegidas,]
library(TeachingDemos)
sigma.test(muestra_flores$Sepal.Width, sigma = 0.2, alternative = "less")
sigma.test(muestra_flores$Sepal.Width, sigmasq = 0.2, alternative = "less")
set.seed(45)
flores_elegidas_setosa = sample(1:50, 40, replace = TRUE)
flores_elegidas_versicolor = sample(51:100, 40, replace = TRUE)
muestra_setosa = iris[flores_elegidas_setosa]
muestra_versicolor = iris[flores_elegidas_versicolor]
muestra_setosa = iris[flores_elegidas_setosa,]
muestra_versicolor = iris[flores_elegidas_versicolor,]
t.test(muestra_setosa$Petal.Length, muestra_versicolor$Petal.Length, alternative = 'two.side')
t.test(muestra_setosa$Petal.Length, muestra_versicolor$Petal.Length, alternative = 'two.sided')
t.test(muestra_setosa$Petal.Length, muestra_versicolor$Petal.Length, alternative = 'two.side')
# Test con varianzas iguales
t.test(muestra_setosa$Petal.Length, muestra_versicolor$Petal.Length, alternative = 'two.side', var.equal = TRUE)
knitr::opts_chunk$set(echo = TRUE)
muestra_virginica = iris[flores_escogidas]
set.seed(100)
flores_escogidas = sample(101:150, 40, replace = TRUE)
muestra_virginica = iris[flores_escogidas]
muestra_virginica = iris[flores_escogidas,]
t.test(muestra_virginica$Petal.Length, muestra_virginica$Sepal.Length, paired = TRUE, alternative = "greater")
set.seed(110)
flores_escogidas = sample(101:150, 40, replace = TRUE)
muestra_virginica = iris[flores_escogidas,]
t.test(muestra_virginica$Petal.Length, muestra_virginica$Sepal.Length, paired = TRUE, alternative = "greater")
t.test(muestra_virginica$Sepal.Length, muestra_virginica$Petal.Length, paired = TRUE, alternative = "greater")
library(MASS)
library(MASS)
set.seed(333)
madres_elegidas = sample(1:189, 30, replace = TRUE)
muestras_madres = birthwt[madres_elegidas,]
matriz_prop = table(muestra_madres$smoke, muestra_madres$ht)
matriz_prop = table(muestras_madres$smoke, muestras_madres$ht)
(matriz_prop = table(muestras_madres$smoke, muestras_madres$ht))
matriz_prop = rbind(matriz_prop[2,], matriz_prop[1,])
matriz_prop = cbind(matriz_prop[,2], matriz_prop[,1])
(matriz_prop = table(muestras_madres$smoke, muestras_madres$ht))
matriz_prop = rbind(matriz_prop[2,], matriz_prop[1,])
matriz_prop = cbind(matriz_prop[,2], matriz_prop[,1])
matriz_prop
mcnemar.test(matriz_prop)
matriz_prop
(n = matriz_prop[1,2] + matriz_prop[2,1])
(éxitos = matriz_prop[2,1])
binom.test(éxitos, n , p = 0.5)
